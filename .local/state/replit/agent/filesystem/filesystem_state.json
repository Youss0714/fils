{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# YGestion - Business Management Application\n\n## Overview\nYGestion is a comprehensive business management application designed for the African market, specifically supporting XOF (Franc CFA) and GHS (Cedi) currencies. Built with React, Express, and PostgreSQL, it provides a complete solution for managing clients, products, categories, invoices, and sales. Key capabilities include professional invoice generation with PDF export, real-time business metrics, robust client and product management, multi-language support (French and English), and automatic stock management. The project aims to offer a modern, responsive, and type-safe solution for small to medium-sized businesses.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter\n- **State Management**: TanStack Query (React Query) for server state\n- **UI Components**: shadcn/ui with Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables\n- **Build Tool**: Vite\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: Replit Auth with OpenID Connect\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n- **API Design**: RESTful endpoints\n\n### Database Architecture\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Schema Management**: Drizzle Kit for migrations\n- **Connection Pooling**: Neon serverless pool with WebSocket support\n\n### Key Features and Design Decisions\n- **Authentication**: Local Email/Password with Bcrypt hashing, HTTP-only cookies, and secure sessions.\n- **Data Models**: Comprehensive models for Users, Clients, Categories, Products, Invoices, and Sales.\n- **UI/UX**: Consistent design system using shadcn/ui, responsive layout, React Hook Form with Zod validation, optimistic updates with React Query, and toast notifications.\n- **Data Flow**: Authenticated client-server communication, Drizzle ORM for type-safe database operations, Zod schemas for runtime validation.\n- **Invoice System**: Supports 6 configurable VAT rates (3%, 5%, 10%, 15%, 18%, 21%) calculated at the invoice level, PDF export, and automatic sales creation upon payment.\n- **Stock Management**: Automatic stock deduction on paid invoices, protection against negative stock, and customizable product alert thresholds.\n- **Multi-Currency Support**: Exclusive support for XOF and GHS.\n- **Multi-Language**: Full i18n system for French and English, with language selection at startup and persistence.\n- **Dashboard**: Real-time business metrics, revenue growth calculation, and top product statistics.\n- **User Profile**: Comprehensive profile editing for personalized contact information on invoices.\n- **Application Rebranding**: Renamed from GestionPro to YGestion.\n- **PDF Generation**: Utilizes jsPDF and html2canvas for robust PDF export.\n- **Print Functionality**: Includes print-only CSS styles for clean invoice printing.\n\n## External Dependencies\n- **Database**: Neon PostgreSQL (serverless)\n- **Authentication**: Replit Auth service\n- **UI Library**: Radix UI primitives\n- **Styling**: Tailwind CSS\n- **Validation**: Zod\n- **PDF Generation**: jsPDF, html2canvas\n\n## Migration to Standard Replit Environment (August 10, 2025)\n✓ **Migration Status**: Successfully completed migration from Replit Agent  \n✓ **Database Setup**: PostgreSQL database provisioned and schema deployed automatically  \n✓ **Application Status**: Running successfully on port 5000 without errors  \n✓ **Dependencies**: All packages properly installed and configured  \n✓ **Logo Feature Removed**: Company logo upload functionality completely removed as requested\n  - Deleted logo-upload.tsx component\n  - Removed logo upload UI from settings page  \n  - Deleted API routes for logo management (/api/user/logo)\n  - Removed companyLogo field from database schema\n  - Cleaned logo references from invoice PDFs and components\n✓ **Features Verified**: All business management features functional (dashboard, invoicing, client management)\n\n## Licensing System Implementation (August 10, 2025)\n✓ **Complete Licensing System**: Full license management system implemented\n  - PostgreSQL table for license storage with activation tracking\n  - Admin API routes protected by token authentication\n  - Public activation API for clients (/api/activate)\n  - Web interfaces for activation (public/index.html) and administration (public/admin.html)\n  - React components integration with sidebar navigation\n✓ **Administrator Change**: License system admin changed to \"Youssouphafils\"\n  - Admin token: youssouphafils-admin-2025\n  - Sidebar menu appears for users named \"Youssouphafils\"\n  - All license creation attributed to \"Youssouphafils\"\n✓ **Security Features**: Token-based admin authentication, unique license keys, revocation capability\n✓ **User Experience**: Simple activation flow, comprehensive admin dashboard, real-time status tracking","size_bytes":5056},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./simpleAuth\";\nimport { \n  insertClientSchema, \n  insertProductSchema, \n  insertCategorySchema, \n  insertInvoiceSchema,\n  insertInvoiceItemSchema,\n  insertLicenseSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  setupAuth(app);\n\n  // Complete user profile\n  app.post('/api/auth/complete-profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const profileData = {\n        firstName: req.body.firstName,\n        lastName: req.body.lastName,\n        phone: req.body.phone,\n        company: req.body.company,\n        position: req.body.position,\n        address: req.body.address,\n        businessType: req.body.businessType,\n      };\n\n      // Mise à jour du profil utilisateur\n      const updatedUser = await storage.updateUserProfile(userId, profileData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      res.status(500).json({ message: \"Failed to update user profile\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Client routes\n  app.get(\"/api/clients\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const query = req.query.search as string;\n      \n      if (query) {\n        // Search clients by name, email, or company\n        const clients = await storage.searchClients(userId, query);\n        res.json(clients);\n      } else {\n        const clients = await storage.getClients(userId);\n        res.json(clients);\n      }\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const client = await storage.getClient(id, userId);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error fetching client:\", error);\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const clientData = insertClientSchema.parse({ ...req.body, userId });\n      const client = await storage.createClient(clientData);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      res.status(400).json({ message: \"Failed to create client\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const clientData = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(id, clientData, userId);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n      res.status(400).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteClient(id, userId);\n      res.json({ message: \"Client deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting client:\", error);\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const query = req.query.search as string;\n      \n      if (query) {\n        // Search products by name or description\n        const products = await storage.searchProducts(userId, query);\n        res.json(products);\n      } else {\n        const products = await storage.getProducts(userId);\n        res.json(products);\n      }\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const product = await storage.getProduct(id, userId);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const productData = insertProductSchema.parse({ ...req.body, userId });\n      const product = await storage.createProduct(productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(400).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(id, productData, userId);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(400).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteProduct(id, userId);\n      res.json({ message: \"Product deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const categories = await storage.getCategories(userId);\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const categoryData = insertCategorySchema.parse({ ...req.body, userId });\n      const category = await storage.createCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(400).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(id, categoryData, userId);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(400).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteCategory(id, userId);\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Invoice routes\n  app.get(\"/api/invoices\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const invoices = await storage.getInvoices(userId);\n      res.json(invoices);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const invoice = await storage.getInvoiceWithItems(id, userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error fetching invoice:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id/details\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const invoice = await storage.getInvoiceWithItems(id, userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error fetching invoice details:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoice details\" });\n    }\n  });\n\n  const createInvoiceSchema = z.object({\n    invoice: insertInvoiceSchema.omit({ userId: true }).extend({\n      dueDate: z.string().optional().transform(val => val ? new Date(val) : undefined),\n    }),\n    items: z.array(insertInvoiceItemSchema.omit({ invoiceId: true })),\n  });\n\n  app.post(\"/api/invoices\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { invoice, items } = createInvoiceSchema.parse(req.body);\n      const invoiceData = { ...invoice, userId };\n      const newInvoice = await storage.createInvoice(invoiceData, items);\n      res.json(newInvoice);\n    } catch (error) {\n      console.error(\"Error creating invoice:\", error);\n      res.status(400).json({ message: \"Failed to create invoice\" });\n    }\n  });\n\n  app.put(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      const invoiceData = insertInvoiceSchema.partial().parse(req.body);\n      const invoice = await storage.updateInvoice(id, invoiceData, userId);\n      res.json(invoice);\n    } catch (error) {\n      console.error(\"Error updating invoice:\", error);\n      res.status(400).json({ message: \"Failed to update invoice\" });\n    }\n  });\n\n  app.delete(\"/api/invoices/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const id = parseInt(req.params.id);\n      await storage.deleteInvoice(id, userId);\n      res.json({ message: \"Invoice deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting invoice:\", error);\n      res.status(500).json({ message: \"Failed to delete invoice\" });\n    }\n  });\n\n  // Sales routes\n  app.get(\"/api/sales\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const sales = await storage.getSales(userId);\n      res.json(sales);\n    } catch (error) {\n      console.error(\"Error fetching sales:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales\" });\n    }\n  });\n\n  // Data export routes\n  app.get(\"/api/export/clients\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const clients = await storage.getClients(userId);\n      \n      const csv = [\n        \"ID,Nom,Email,Téléphone,Entreprise,Adresse,Date de création\",\n        ...clients.map(client => \n          `${client.id},\"${client.name}\",\"${client.email || ''}\",\"${client.phone || ''}\",\"${client.company || ''}\",\"${client.address || ''}\",\"${client.createdAt?.toISOString() || ''}\"`\n        )\n      ].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"clients.csv\"');\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Error exporting clients:\", error);\n      res.status(500).json({ message: \"Failed to export clients\" });\n    }\n  });\n\n  app.get(\"/api/export/products\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const products = await storage.getProducts(userId);\n      \n      const csv = [\n        \"ID,Nom,Description,Prix HT,Stock,Date de création\",\n        ...products.map(product => \n          `${product.id},\"${product.name}\",\"${product.description || ''}\",\"${product.priceHT}\",\"${product.stock}\",\"${product.createdAt?.toISOString() || ''}\"`\n        )\n      ].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"products.csv\"');\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Error exporting products:\", error);\n      res.status(500).json({ message: \"Failed to export products\" });\n    }\n  });\n\n  app.get(\"/api/export/invoices\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const invoices = await storage.getInvoices(userId);\n      \n      const csv = [\n        \"ID,Numéro,Client ID,Statut,Total HT,Taux TVA,Total TVA,Total TTC,Échéance,Date de création\",\n        ...invoices.map(invoice => \n          `${invoice.id},\"${invoice.number}\",\"${invoice.clientId}\",\"${invoice.status}\",\"${invoice.totalHT}\",\"${invoice.tvaRate}\",\"${invoice.totalTVA}\",\"${invoice.totalTTC}\",\"${invoice.dueDate?.toISOString() || ''}\",\"${invoice.createdAt?.toISOString() || ''}\"`\n        )\n      ].join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"invoices.csv\"');\n      res.send(csv);\n    } catch (error) {\n      console.error(\"Error exporting invoices:\", error);\n      res.status(500).json({ message: \"Failed to export invoices\" });\n    }\n  });\n\n  // User settings routes\n  app.get(\"/api/user/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      res.json({\n        currency: user?.currency || \"XOF\",\n        language: user?.language || \"fr\",\n      });\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des paramètres\" });\n    }\n  });\n\n  app.patch(\"/api/user/settings\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { currency, language } = req.body;\n      const updatedUser = await storage.updateUserSettings(req.user.id, { currency, language });\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user settings:\", error);\n      res.status(500).json({ message: \"Erreur lors de la mise à jour des paramètres\" });\n    }\n  });\n\n  // License activation route (public)\n  app.post(\"/api/activate\", async (req, res) => {\n    try {\n      const { key, clientName, deviceId } = req.body;\n\n      if (!key) {\n        return res.status(400).json({ message: \"Clé d'activation requise\" });\n      }\n\n      // Check if license exists\n      const license = await storage.getLicenseByKey(key);\n      if (!license) {\n        return res.status(404).json({ message: \"Clé d'activation invalide\" });\n      }\n\n      // Check if already activated\n      if (license.activated) {\n        return res.status(409).json({ message: \"Cette clé a déjà été activée\" });\n      }\n\n      // Check if revoked\n      if (license.revokedAt) {\n        return res.status(403).json({ message: \"Cette clé a été révoquée\" });\n      }\n\n      // Activate the license\n      const activatedLicense = await storage.activateLicense(key, clientName, deviceId);\n      \n      res.json({\n        message: \"Licence activée avec succès\",\n        license: {\n          key: activatedLicense.key,\n          clientName: activatedLicense.clientName,\n          activatedAt: activatedLicense.activatedAt,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error activating license:\", error);\n      res.status(500).json({ message: \"Erreur lors de l'activation de la licence\" });\n    }\n  });\n\n  // Admin middleware to check for ADMIN_TOKEN\n  const isAdmin = (req: any, res: any, next: any) => {\n    const adminToken = req.headers[\"x-admin-token\"];\n    const expectedToken = process.env.ADMIN_TOKEN || \"youssouphafils-admin-2025\";\n\n    if (!adminToken || adminToken !== expectedToken) {\n      return res.status(403).json({ message: \"Accès admin refusé\" });\n    }\n\n    next();\n  };\n\n  // Admin routes for Fatimata\n  app.get(\"/api/admin/licenses\", isAdmin, async (req, res) => {\n    try {\n      const licenses = await storage.getAllLicenses();\n      res.json(licenses);\n    } catch (error) {\n      console.error(\"Error fetching licenses:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération des licences\" });\n    }\n  });\n\n  app.post(\"/api/admin/licenses\", isAdmin, async (req, res) => {\n    try {\n      const licenseData = insertLicenseSchema.parse(req.body);\n      \n      // Check if key already exists\n      const existingLicense = await storage.getLicenseByKey(licenseData.key);\n      if (existingLicense) {\n        return res.status(409).json({ message: \"Cette clé existe déjà\" });\n      }\n\n      const newLicense = await storage.createLicense(licenseData);\n      res.status(201).json(newLicense);\n    } catch (error) {\n      console.error(\"Error creating license:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Données invalides\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Erreur lors de la création de la licence\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/admin/licenses/:key/revoke\", isAdmin, async (req, res) => {\n    try {\n      const { key } = req.params;\n      \n      const license = await storage.getLicenseByKey(key);\n      if (!license) {\n        return res.status(404).json({ message: \"Licence introuvable\" });\n      }\n\n      const revokedLicense = await storage.revokeLicense(key);\n      res.json(revokedLicense);\n    } catch (error) {\n      console.error(\"Error revoking license:\", error);\n      res.status(500).json({ message: \"Erreur lors de la révocation de la licence\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":19002},"server/simpleAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport type { User as UserType } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends UserType {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  // Simple session configuration using memory store\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"ygestion-local-auth-secret\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n    },\n  };\n\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Local strategy\n  passport.use(\n    new LocalStrategy(\n      {\n        usernameField: \"email\",\n        passwordField: \"password\",\n      },\n      async (email, password, done) => {\n        try {\n          const user = await storage.getUserByEmail(email);\n          if (!user || !user.password) {\n            return done(null, false, { message: \"Email ou mot de passe incorrect\" });\n          }\n          \n          const isValid = await comparePasswords(password, user.password);\n          if (!isValid) {\n            return done(null, false, { message: \"Email ou mot de passe incorrect\" });\n          }\n          \n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user: any, done) => done(null, user.id));\n  \n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration route\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      if (!email || !password || !firstName || !lastName) {\n        return res.status(400).json({ \n          message: \"Email, mot de passe, prénom et nom sont requis\" \n        });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ \n          message: \"Le mot de passe doit contenir au moins 6 caractères\" \n        });\n      }\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ \n          message: \"Un compte avec cet email existe déjà\" \n        });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const userId = randomBytes(16).toString(\"hex\");\n\n      const newUser = await storage.createLocalUser({\n        id: userId,\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n      });\n\n      req.login(newUser, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: newUser.id,\n          email: newUser.email,\n          firstName: newUser.firstName,\n          lastName: newUser.lastName,\n        });\n      });\n    } catch (error) {\n      console.error(\"Erreur lors de l'inscription:\", error);\n      res.status(500).json({ message: \"Erreur serveur lors de l'inscription\" });\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Erreur serveur\" });\n      }\n      if (!user) {\n        return res.status(401).json({ \n          message: info?.message || \"Email ou mot de passe incorrect\" \n        });\n      }\n      \n      req.login(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Erreur de connexion\" });\n        }\n        res.json({\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n        });\n      });\n    })(req, res, next);\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.json({ message: \"Déconnexion réussie\" });\n    });\n  });\n\n  // Get current user route\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated() || !req.user) {\n      return res.status(401).json({ message: \"Non authentifié\" });\n    }\n    \n    const user = req.user as UserType;\n    res.json({\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      phone: user.phone,\n      company: user.company,\n      position: user.position,\n      address: user.address,\n      businessType: user.businessType,\n      profileImageUrl: user.profileImageUrl,\n    });\n  });\n}\n\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Authentification requise\" });\n}","size_bytes":5588},"server/storage.ts":{"content":"import {\n  users,\n  clients,\n  products,\n  categories,\n  invoices,\n  invoiceItems,\n  sales,\n  licenses,\n  type User,\n  type UpsertUser,\n  type Client,\n  type Product,\n  type Category,\n  type Invoice,\n  type InvoiceItem,\n  type Sale,\n  type License,\n  type InsertClient,\n  type InsertProduct,\n  type InsertCategory,\n  type InsertInvoice,\n  type InsertInvoiceItem,\n  type InsertSale,\n  type InsertLicense,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sum, count, sql, like, or } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createLocalUser(user: UpsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserProfile(id: string, profileData: Partial<User>): Promise<User>;\n  updateUserSettings(id: string, settings: { currency?: string; language?: string }): Promise<User>;\n\n  \n  // Client operations\n  getClients(userId: string): Promise<Client[]>;\n  getClient(id: number, userId: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: number, client: Partial<InsertClient>, userId: string): Promise<Client>;\n  deleteClient(id: number, userId: string): Promise<void>;\n  searchClients(userId: string, query: string): Promise<Client[]>;\n  \n  // Product operations\n  getProducts(userId: string): Promise<Product[]>;\n  getProduct(id: number, userId: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: number, product: Partial<InsertProduct>, userId: string): Promise<Product>;\n  deleteProduct(id: number, userId: string): Promise<void>;\n  searchProducts(userId: string, query: string): Promise<Product[]>;\n  \n  // Category operations\n  getCategories(userId: string): Promise<Category[]>;\n  getCategory(id: number, userId: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: number, category: Partial<InsertCategory>, userId: string): Promise<Category>;\n  deleteCategory(id: number, userId: string): Promise<void>;\n  \n  // Invoice operations\n  getInvoices(userId: string): Promise<Invoice[]>;\n  getInvoice(id: number, userId: string): Promise<Invoice | undefined>;\n  getInvoiceWithItems(id: number, userId: string): Promise<(Invoice & { items: InvoiceItem[]; client: Client }) | undefined>;\n  createInvoice(invoice: InsertInvoice, items: Omit<InsertInvoiceItem, 'invoiceId'>[]): Promise<Invoice>;\n  updateInvoice(id: number, invoice: Partial<InsertInvoice>, userId: string): Promise<Invoice>;\n  deleteInvoice(id: number, userId: string): Promise<void>;\n  \n  // Sales operations\n  getSales(userId: string): Promise<Sale[]>;\n  createSale(sale: InsertSale): Promise<Sale>;\n  \n  // Dashboard statistics\n  getDashboardStats(userId: string): Promise<{\n    revenue: number;\n    invoiceCount: number;\n    clientCount: number;\n    productCount: number;\n    recentInvoices: (Invoice & { client: Client })[];\n    topProducts: (Product & { salesCount: number })[];\n    lowStockProducts: Product[];\n  }>;\n\n  // License operations\n  getLicenseByKey(key: string): Promise<License | undefined>;\n  getAllLicenses(): Promise<License[]>;\n  createLicense(license: InsertLicense): Promise<License>;\n  activateLicense(key: string, clientName?: string, deviceId?: string): Promise<License>;\n  revokeLicense(key: string): Promise<License>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createLocalUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUserProfile(id: string, profileData: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        ...profileData,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserSettings(id: string, settings: { currency?: string; language?: string }): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...settings, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n\n\n  // Client operations\n  async getClients(userId: string): Promise<Client[]> {\n    return db.select().from(clients).where(eq(clients.userId, userId)).orderBy(desc(clients.createdAt));\n  }\n\n  async getClient(id: number, userId: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(and(eq(clients.id, id), eq(clients.userId, userId)));\n    return client;\n  }\n\n  async createClient(client: InsertClient): Promise<Client> {\n    const [newClient] = await db.insert(clients).values(client).returning();\n    return newClient;\n  }\n\n  async updateClient(id: number, client: Partial<InsertClient>, userId: string): Promise<Client> {\n    const [updatedClient] = await db\n      .update(clients)\n      .set(client)\n      .where(and(eq(clients.id, id), eq(clients.userId, userId)))\n      .returning();\n    return updatedClient;\n  }\n\n  async deleteClient(id: number, userId: string): Promise<void> {\n    await db.delete(clients).where(and(eq(clients.id, id), eq(clients.userId, userId)));\n  }\n\n  async searchClients(userId: string, query: string): Promise<Client[]> {\n    const searchTerm = `%${query.toLowerCase()}%`;\n    return db.select().from(clients)\n      .where(and(\n        eq(clients.userId, userId),\n        or(\n          like(sql`LOWER(${clients.name})`, searchTerm),\n          like(sql`LOWER(${clients.email})`, searchTerm),\n          like(sql`LOWER(${clients.company})`, searchTerm)\n        )\n      ))\n      .orderBy(desc(clients.createdAt))\n      .limit(10);\n  }\n\n  // Product operations\n  async getProducts(userId: string): Promise<Product[]> {\n    return db.select().from(products).where(eq(products.userId, userId)).orderBy(desc(products.createdAt));\n  }\n\n  async getProduct(id: number, userId: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(and(eq(products.id, id), eq(products.userId, userId)));\n    return product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: number, product: Partial<InsertProduct>, userId: string): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set(product)\n      .where(and(eq(products.id, id), eq(products.userId, userId)))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: number, userId: string): Promise<void> {\n    await db.delete(products).where(and(eq(products.id, id), eq(products.userId, userId)));\n  }\n\n  async searchProducts(userId: string, query: string): Promise<Product[]> {\n    const searchTerm = `%${query.toLowerCase()}%`;\n    return db.select().from(products)\n      .where(and(\n        eq(products.userId, userId),\n        or(\n          like(sql`LOWER(${products.name})`, searchTerm),\n          like(sql`LOWER(${products.description})`, searchTerm)\n        )\n      ))\n      .orderBy(desc(products.createdAt))\n      .limit(10);\n  }\n\n  // Category operations\n  async getCategories(userId: string): Promise<Category[]> {\n    return db.select().from(categories).where(eq(categories.userId, userId)).orderBy(desc(categories.createdAt));\n  }\n\n  async getCategory(id: number, userId: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(and(eq(categories.id, id), eq(categories.userId, userId)));\n    return category;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: number, category: Partial<InsertCategory>, userId: string): Promise<Category> {\n    const [updatedCategory] = await db\n      .update(categories)\n      .set(category)\n      .where(and(eq(categories.id, id), eq(categories.userId, userId)))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: number, userId: string): Promise<void> {\n    await db.delete(categories).where(and(eq(categories.id, id), eq(categories.userId, userId)));\n  }\n\n  // Invoice operations\n  async getInvoices(userId: string): Promise<Invoice[]> {\n    return db.select().from(invoices).where(eq(invoices.userId, userId)).orderBy(desc(invoices.createdAt));\n  }\n\n  async getInvoice(id: number, userId: string): Promise<Invoice | undefined> {\n    const [invoice] = await db.select().from(invoices).where(and(eq(invoices.id, id), eq(invoices.userId, userId)));\n    return invoice;\n  }\n\n  async getInvoiceWithItems(id: number, userId: string): Promise<(Invoice & { items: InvoiceItem[]; client: Client }) | undefined> {\n    const [invoice] = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)));\n\n    if (!invoice) return undefined;\n\n    const items = await db.select().from(invoiceItems).where(eq(invoiceItems.invoiceId, id));\n\n    return {\n      ...invoice.invoices,\n      items,\n      client: invoice.clients!,\n    };\n  }\n\n  async createInvoice(invoice: InsertInvoice, items: Omit<InsertInvoiceItem, 'invoiceId'>[]): Promise<Invoice> {\n    const [newInvoice] = await db.insert(invoices).values(invoice).returning();\n    \n    if (items.length > 0) {\n      const itemsWithInvoiceId = items.map(item => ({\n        ...item,\n        invoiceId: newInvoice.id,\n      }));\n      await db.insert(invoiceItems).values(itemsWithInvoiceId);\n\n      // Update stock immediately after creating invoice\n      await this.updateStockAfterInvoiceCreation(itemsWithInvoiceId, invoice.userId);\n      \n      // If the invoice is created with 'payee' status, create sales records immediately\n      if (invoice.status === 'payee' || invoice.status === 'paid') {\n        await this.createSalesFromInvoice(newInvoice.id, invoice.userId);\n      }\n    }\n\n    return newInvoice;\n  }\n\n  async updateInvoice(id: number, invoice: Partial<InsertInvoice>, userId: string): Promise<Invoice> {\n    // Get the current invoice before updating\n    const currentInvoice = await this.getInvoice(id, userId);\n    \n    const [updatedInvoice] = await db\n      .update(invoices)\n      .set(invoice)\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)))\n      .returning();\n\n    // If the status changed to 'payee' (or old 'paid'), create sales records\n    if ((invoice.status === 'payee' || invoice.status === 'paid') && \n        currentInvoice?.status !== 'payee' && currentInvoice?.status !== 'paid') {\n      await this.createSalesFromInvoice(id, userId);\n    }\n\n    return updatedInvoice;\n  }\n\n  // Helper function to update stock after invoice creation\n  private async updateStockAfterInvoiceCreation(items: InsertInvoiceItem[], userId: string): Promise<void> {\n    // Update stock for each product (prevent negative stock)\n    for (const item of items.filter(item => item.productId)) {\n      await db\n        .update(products)\n        .set({\n          stock: sql`GREATEST(0, ${products.stock} - ${item.quantity})`\n        })\n        .where(and(\n          eq(products.id, item.productId!),\n          eq(products.userId, userId)\n        ));\n    }\n  }\n\n  // Helper function to create sales from invoice items\n  private async createSalesFromInvoice(invoiceId: number, userId: string): Promise<void> {\n    // Get invoice items\n    const items = await db.select().from(invoiceItems).where(eq(invoiceItems.invoiceId, invoiceId));\n    \n    // Create sales records for each item and update stock\n    const salesData = items\n      .filter(item => item.productId) // Only create sales for items with productId\n      .map(item => ({\n        invoiceId: invoiceId,\n        productId: item.productId!,\n        quantity: item.quantity,\n        unitPrice: item.priceHT,\n        total: item.totalHT,\n        userId: userId,\n      }));\n\n    if (salesData.length > 0) {\n      // Insert sales records\n      await db.insert(sales).values(salesData);\n      \n      // Update stock for each product (prevent negative stock)\n      for (const item of items.filter(item => item.productId)) {\n        await db\n          .update(products)\n          .set({\n            stock: sql`GREATEST(0, ${products.stock} - ${item.quantity})`\n          })\n          .where(and(\n            eq(products.id, item.productId!),\n            eq(products.userId, userId)\n          ));\n      }\n    }\n  }\n\n  async deleteInvoice(id: number, userId: string): Promise<void> {\n    // First delete sales records associated with this invoice\n    await db.delete(sales).where(eq(sales.invoiceId, id));\n    // Then delete invoice items\n    await db.delete(invoiceItems).where(eq(invoiceItems.invoiceId, id));\n    // Finally delete the invoice\n    await db.delete(invoices).where(and(eq(invoices.id, id), eq(invoices.userId, userId)));\n  }\n\n  // Sales operations\n  async getSales(userId: string): Promise<Sale[]> {\n    return db.select().from(sales).where(eq(sales.userId, userId)).orderBy(desc(sales.createdAt));\n  }\n\n  async createSale(sale: InsertSale): Promise<Sale> {\n    const [newSale] = await db.insert(sales).values(sale).returning();\n    return newSale;\n  }\n\n  // Dashboard statistics\n  async getDashboardStats(userId: string): Promise<{\n    revenue: number;\n    invoiceCount: number;\n    clientCount: number;\n    productCount: number;\n    recentInvoices: (Invoice & { client: Client })[];\n    topProducts: (Product & { salesCount: number })[];\n    lowStockProducts: Product[];\n    revenueGrowth: number;\n    invoiceGrowth: number;\n    clientGrowth: number;\n    recentInvoiceCount: number;\n    recentClientCount: number;\n  }> {\n    const now = new Date();\n    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n    const thisWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n    // Current revenue (sum of all paid invoices)\n    const revenueResult = await db\n      .select({ total: sum(invoices.totalTTC) })\n      .from(invoices)\n      .where(and(eq(invoices.userId, userId), eq(invoices.status, \"payee\")));\n    \n    const revenue = parseFloat(revenueResult[0]?.total || \"0\");\n\n    // Previous month revenue for comparison\n    const lastMonthRevenueResult = await db\n      .select({ total: sum(invoices.totalTTC) })\n      .from(invoices)\n      .where(and(\n        eq(invoices.userId, userId), \n        eq(invoices.status, \"payee\"),\n        sql`${invoices.createdAt} >= ${lastMonth.toISOString()}`,\n        sql`${invoices.createdAt} < ${thisMonth.toISOString()}`\n      ));\n    \n    const lastMonthRevenue = parseFloat(lastMonthRevenueResult[0]?.total || \"0\");\n    const revenueGrowth = lastMonthRevenue > 0 ? ((revenue - lastMonthRevenue) / lastMonthRevenue) * 100 : 0;\n\n    // Total invoice count\n    const invoiceCountResult = await db\n      .select({ count: count() })\n      .from(invoices)\n      .where(eq(invoices.userId, userId));\n    \n    const invoiceCount = invoiceCountResult[0]?.count || 0;\n\n    // Recent invoices (this week)\n    const recentInvoiceCountResult = await db\n      .select({ count: count() })\n      .from(invoices)\n      .where(and(\n        eq(invoices.userId, userId),\n        sql`${invoices.createdAt} >= ${thisWeek.toISOString()}`\n      ));\n    \n    const recentInvoiceCount = recentInvoiceCountResult[0]?.count || 0;\n\n    // Previous week invoice count for comparison\n    const lastWeekInvoiceCountResult = await db\n      .select({ count: count() })\n      .from(invoices)\n      .where(and(\n        eq(invoices.userId, userId),\n        sql`${invoices.createdAt} >= ${lastWeek.toISOString()}`,\n        sql`${invoices.createdAt} < ${thisWeek.toISOString()}`\n      ));\n    \n    const lastWeekInvoiceCount = lastWeekInvoiceCountResult[0]?.count || 0;\n    const invoiceGrowth = lastWeekInvoiceCount > 0 ? ((recentInvoiceCount - lastWeekInvoiceCount) / lastWeekInvoiceCount) * 100 : 0;\n\n    // Total client count\n    const clientCountResult = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(eq(clients.userId, userId));\n    \n    const clientCount = clientCountResult[0]?.count || 0;\n\n    // Recent clients (this month)\n    const recentClientCountResult = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(and(\n        eq(clients.userId, userId),\n        sql`${clients.createdAt} >= ${thisMonth.toISOString()}`\n      ));\n    \n    const recentClientCount = recentClientCountResult[0]?.count || 0;\n\n    // Previous month client count for comparison\n    const lastMonthClientCountResult = await db\n      .select({ count: count() })\n      .from(clients)\n      .where(and(\n        eq(clients.userId, userId),\n        sql`${clients.createdAt} >= ${lastMonth.toISOString()}`,\n        sql`${clients.createdAt} < ${thisMonth.toISOString()}`\n      ));\n    \n    const lastMonthClientCount = lastMonthClientCountResult[0]?.count || 0;\n    const clientGrowth = lastMonthClientCount > 0 ? ((recentClientCount - lastMonthClientCount) / lastMonthClientCount) * 100 : 0;\n\n    // Product count\n    const productCountResult = await db\n      .select({ count: count() })\n      .from(products)\n      .where(eq(products.userId, userId));\n    \n    const productCount = productCountResult[0]?.count || 0;\n\n    // Recent invoices with client info\n    const recentInvoices = await db\n      .select()\n      .from(invoices)\n      .leftJoin(clients, eq(invoices.clientId, clients.id))\n      .where(eq(invoices.userId, userId))\n      .orderBy(desc(invoices.createdAt))\n      .limit(5);\n\n    const recentInvoicesFormatted = recentInvoices.map(row => ({\n      ...row.invoices,\n      client: row.clients!,\n    }));\n\n    // Top products by sales quantity\n    const topProductsResult = await db\n      .select({\n        product: products,\n        salesCount: sum(sales.quantity),\n      })\n      .from(products)\n      .leftJoin(sales, eq(products.id, sales.productId))\n      .where(eq(products.userId, userId))\n      .groupBy(products.id)\n      .orderBy(desc(sum(sales.quantity)))\n      .limit(5);\n\n    const topProducts = topProductsResult\n      .map(row => ({\n        ...row.product,\n        salesCount: parseInt(row.salesCount || \"0\"),\n      }))\n      .sort((a, b) => b.salesCount - a.salesCount); // Ensure proper sorting by sales count\n\n    // Low stock products (stock < 10)\n    const lowStockProducts = await db\n      .select()\n      .from(products)\n      .where(and(eq(products.userId, userId), eq(products.stock, 0)))\n      .limit(10);\n\n    return {\n      revenue,\n      invoiceCount,\n      clientCount,\n      productCount,\n      recentInvoices: recentInvoicesFormatted,\n      topProducts,\n      lowStockProducts,\n      revenueGrowth: Math.round(revenueGrowth * 100) / 100,\n      invoiceGrowth: Math.round(invoiceGrowth * 100) / 100,\n      clientGrowth: Math.round(clientGrowth * 100) / 100,\n      recentInvoiceCount,\n      recentClientCount,\n    };\n  }\n\n  // License operations\n  async getLicenseByKey(key: string): Promise<License | undefined> {\n    const [license] = await db.select().from(licenses).where(eq(licenses.key, key));\n    return license;\n  }\n\n  async getAllLicenses(): Promise<License[]> {\n    return db.select().from(licenses).orderBy(desc(licenses.createdAt));\n  }\n\n  async createLicense(licenseData: InsertLicense): Promise<License> {\n    const [license] = await db.insert(licenses).values(licenseData).returning();\n    return license;\n  }\n\n  async activateLicense(key: string, clientName?: string, deviceId?: string): Promise<License> {\n    const [license] = await db\n      .update(licenses)\n      .set({\n        activated: true,\n        clientName,\n        deviceId,\n        activatedAt: new Date(),\n      })\n      .where(eq(licenses.key, key))\n      .returning();\n    return license;\n  }\n\n  async revokeLicense(key: string): Promise<License> {\n    const [license] = await db\n      .update(licenses)\n      .set({\n        activated: false,\n        revokedAt: new Date(),\n      })\n      .where(eq(licenses.key, key))\n      .returning();\n    return license;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":21070},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  decimal,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - for local authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\"), // For local auth\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n\n  phone: varchar(\"phone\", { length: 50 }),\n  company: varchar(\"company\", { length: 255 }),\n  position: varchar(\"position\", { length: 255 }),\n  address: text(\"address\"),\n  businessType: varchar(\"business_type\", { length: 255 }),\n  currency: varchar(\"currency\", { length: 10 }).default(\"XOF\"), // XOF ou GHS\n  language: varchar(\"language\", { length: 10 }).default(\"fr\"), // fr ou en\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 50 }),\n  address: text(\"address\"),\n  company: varchar(\"company\", { length: 255 }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  priceHT: decimal(\"price_ht\", { precision: 10, scale: 2 }).notNull(), // Prix HT uniquement\n  stock: integer(\"stock\").default(0),\n  alertStock: integer(\"alert_stock\").default(10), // Seuil d'alerte pour le stock\n  categoryId: integer(\"category_id\").references(() => categories.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const invoices = pgTable(\"invoices\", {\n  id: serial(\"id\").primaryKey(),\n  number: varchar(\"number\", { length: 50 }).notNull(),\n  clientId: integer(\"client_id\").notNull().references(() => clients.id),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"en_attente\"), // en_attente, payee, partiellement_reglee\n  totalHT: decimal(\"total_ht\", { precision: 10, scale: 2 }).notNull(), // Total HT\n  tvaRate: decimal(\"tva_rate\", { precision: 5, scale: 2 }).notNull(), // Taux TVA choisi (3%, 5%, 10%, 15%, 18%, 21%)\n  totalTVA: decimal(\"total_tva\", { precision: 10, scale: 2 }).notNull(), // Montant TVA calculé\n  totalTTC: decimal(\"total_ttc\", { precision: 10, scale: 2 }).notNull(), // Total TTC final\n  dueDate: timestamp(\"due_date\"),\n  notes: text(\"notes\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: serial(\"id\").primaryKey(),\n  invoiceId: integer(\"invoice_id\").notNull().references(() => invoices.id),\n  productId: integer(\"product_id\").references(() => products.id),\n  productName: varchar(\"product_name\", { length: 255 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  priceHT: decimal(\"price_ht\", { precision: 10, scale: 2 }).notNull(), // Prix HT unitaire\n  totalHT: decimal(\"total_ht\", { precision: 10, scale: 2 }).notNull(), // Total HT ligne (quantity * priceHT)\n});\n\nexport const sales = pgTable(\"sales\", {\n  id: serial(\"id\").primaryKey(),\n  invoiceId: integer(\"invoice_id\").notNull().references(() => invoices.id),\n  productId: integer(\"product_id\").notNull().references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Licenses table for activation system\nexport const licenses = pgTable(\"licenses\", {\n  id: serial(\"id\").primaryKey(),\n  key: varchar(\"key\", { length: 100 }).notNull().unique(),\n  activated: boolean(\"activated\").default(false),\n  clientName: varchar(\"client_name\", { length: 255 }),\n  deviceId: varchar(\"device_id\", { length: 255 }),\n  createdBy: varchar(\"created_by\", { length: 255 }).notNull(),\n  activatedAt: timestamp(\"activated_at\"),\n  revokedAt: timestamp(\"revoked_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  clients: many(clients),\n  products: many(products),\n  categories: many(categories),\n  invoices: many(invoices),\n  sales: many(sales),\n}));\n\nexport const licensesRelations = relations(licenses, ({ }) => ({}));\n\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  user: one(users, {\n    fields: [categories.userId],\n    references: [users.id],\n  }),\n  products: many(products),\n}));\n\nexport const clientsRelations = relations(clients, ({ one, many }) => ({\n  user: one(users, {\n    fields: [clients.userId],\n    references: [users.id],\n  }),\n  invoices: many(invoices),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  user: one(users, {\n    fields: [products.userId],\n    references: [users.id],\n  }),\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  invoiceItems: many(invoiceItems),\n  sales: many(sales),\n}));\n\nexport const invoicesRelations = relations(invoices, ({ one, many }) => ({\n  user: one(users, {\n    fields: [invoices.userId],\n    references: [users.id],\n  }),\n  client: one(clients, {\n    fields: [invoices.clientId],\n    references: [clients.id],\n  }),\n  items: many(invoiceItems),\n  sales: many(sales),\n}));\n\nexport const invoiceItemsRelations = relations(invoiceItems, ({ one }) => ({\n  invoice: one(invoices, {\n    fields: [invoiceItems.invoiceId],\n    references: [invoices.id],\n  }),\n  product: one(products, {\n    fields: [invoiceItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const salesRelations = relations(sales, ({ one }) => ({\n  user: one(users, {\n    fields: [sales.userId],\n    references: [users.id],\n  }),\n  invoice: one(invoices, {\n    fields: [sales.invoiceId],\n    references: [invoices.id],\n  }),\n  product: one(products, {\n    fields: [sales.productId],\n    references: [products.id],\n  }),\n}));\n\n// Tax rates available for invoices\nexport const TAX_RATES = [\n  { value: \"3.00\", label: \"3%\" },\n  { value: \"5.00\", label: \"5%\" },\n  { value: \"10.00\", label: \"10%\" },\n  { value: \"15.00\", label: \"15%\" },\n  { value: \"18.00\", label: \"18%\" },\n  { value: \"21.00\", label: \"21%\" },\n] as const;\n\n// Invoice status options\nexport const INVOICE_STATUS = [\n  { value: \"en_attente\", label: \"En attente\", icon: \"⏳\", color: \"bg-yellow-100 text-yellow-800\" },\n  { value: \"payee\", label: \"Payée\", icon: \"✅\", color: \"bg-green-100 text-green-800\" },\n  { value: \"partiellement_reglee\", label: \"Partiellement réglée\", icon: \"💳\", color: \"bg-blue-100 text-blue-800\" },\n] as const;\n\n// Insert schemas\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  priceHT: z.string().refine(\n    (val) => {\n      const price = parseFloat(val);\n      return !isNaN(price) && price > 0;\n    },\n    { message: \"Le prix doit être supérieur à 0\" }\n  ),\n  stock: z.number().min(0, \"Le stock ne peut pas être négatif\"),\n  alertStock: z.number().min(1, \"Le seuil d'alerte doit être au moins de 1\"),\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInvoiceItemSchema = createInsertSchema(invoiceItems).omit({\n  id: true,\n});\n\nexport const insertSaleSchema = createInsertSchema(sales).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLicenseSchema = createInsertSchema(licenses).omit({\n  id: true,\n  createdAt: true,\n  activatedAt: true,\n  revokedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type Client = typeof clients.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InvoiceItem = typeof invoiceItems.$inferSelect;\nexport type Sale = typeof sales.$inferSelect;\nexport type License = typeof licenses.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type InsertInvoiceItem = z.infer<typeof insertInvoiceItemSchema>;\nexport type InsertSale = z.infer<typeof insertSaleSchema>;\nexport type InsertLicense = z.infer<typeof insertLicenseSchema>;\n","size_bytes":9870},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useState, useEffect } from \"react\";\nimport LoadingScreen from \"@/components/loading-screen\";\nimport LanguageSelector from \"@/components/language-selector\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport AuthPage from \"@/pages/auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Clients from \"@/pages/clients\";\nimport Products from \"@/pages/products\";\nimport Categories from \"@/pages/categories\";\nimport Invoices from \"@/pages/invoices\";\nimport InvoiceDetail from \"@/pages/invoice-detail\";\nimport Sales from \"@/pages/sales\";\nimport Settings from \"@/pages/settings\";\nimport Export from \"@/pages/export\";\nimport UserRegistration from \"@/pages/user-registration\";\nimport LicenseActivation from \"@/pages/license-activation\";\nimport AdminLicenses from \"@/pages/admin-licenses\";\nimport Sidebar from \"@/components/sidebar\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [showLoadingScreen, setShowLoadingScreen] = useState(() => {\n    // Check if we should show loading screen\n    return !sessionStorage.getItem('hasSeenLoading');\n  });\n  const [showLanguageSelector, setShowLanguageSelector] = useState(() => {\n    // Check if language has been selected before\n    return !localStorage.getItem('initialLanguageSelected');\n  });\n\n  // Show loading screen if not seen before\n  if (showLoadingScreen) {\n    return (\n      <LoadingScreen \n        onComplete={() => {\n          setShowLoadingScreen(false);\n          sessionStorage.setItem('hasSeenLoading', 'true');\n        }} \n      />\n    );\n  }\n\n  // Show language selector if not selected before\n  if (showLanguageSelector) {\n    return (\n      <LanguageSelector \n        onLanguageSelect={(language) => {\n          // Save the language preference\n          localStorage.setItem('initialLanguageSelected', 'true');\n          localStorage.setItem('preferredLanguage', language);\n          setShowLanguageSelector(false);\n        }} \n      />\n    );\n  }\n\n  // Wait for auth to complete before showing main app\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Public routes for license management */}\n      <Route path=\"/activate\" component={LicenseActivation} />\n      <Route path=\"/admin\" component={AdminLicenses} />\n      \n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/auth\" component={AuthPage} />\n          <Route component={AuthPage} />\n        </>\n      ) : (\n        <div className=\"flex h-screen bg-gray-50\">\n          <Sidebar />\n          <Switch>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/clients\" component={Clients} />\n            <Route path=\"/products\" component={Products} />\n            <Route path=\"/categories\" component={Categories} />\n            <Route path=\"/invoices\" component={Invoices} />\n            <Route path=\"/invoices/:id\" component={InvoiceDetail} />\n            <Route path=\"/sales\" component={Sales} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/export\" component={Export} />\n            <Route path=\"/complete-profile\" component={UserRegistration} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4013},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom styles for the application */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.line-clamp-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n/* Print styles - Only show the invoice content when printing */\n@media print {\n  body * {\n    visibility: hidden;\n  }\n  \n  .invoice-content, .invoice-content * {\n    visibility: visible !important;\n  }\n  \n  .invoice-content div,\n  .invoice-content p,\n  .invoice-content h1,\n  .invoice-content h2,\n  .invoice-content h3,\n  .invoice-content span,\n  .invoice-content table,\n  .invoice-content thead,\n  .invoice-content tbody,\n  .invoice-content tr,\n  .invoice-content th,\n  .invoice-content td {\n    display: revert !important;\n    visibility: visible !important;\n  }\n  \n  .invoice-content {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    padding: 20px !important;\n    margin: 0;\n    background: white !important;\n    color: black !important;\n    font-family: Arial, sans-serif !important;\n    line-height: 1.6 !important;\n  }\n  \n  /* Hide all elements that should not appear in print */\n  .print\\:hidden,\n  .sidebar,\n  .navbar,\n  .header,\n  nav,\n  header,\n  .action-buttons,\n  button,\n  .no-print {\n    display: none !important;\n    visibility: hidden !important;\n  }\n  \n  /* Ensure the invoice content is properly styled for print */\n  .invoice-content .card {\n    box-shadow: none !important;\n    border: none !important;\n    background: white !important;\n  }\n  \n  /* Force display of grid elements */\n  .invoice-content .grid {\n    display: grid !important;\n    grid-template-columns: 1fr 1fr !important;\n    gap: 40px !important;\n    margin-bottom: 40px !important;\n  }\n  \n  .invoice-content .grid-cols-1 {\n    grid-template-columns: 1fr !important;\n  }\n  \n  .invoice-content .md\\:grid-cols-2 {\n    grid-template-columns: 1fr 1fr !important;\n  }\n  \n  /* Force display of flex elements */\n  .invoice-content .flex {\n    display: flex !important;\n  }\n  \n  .invoice-content .justify-between {\n    justify-content: space-between !important;\n  }\n  \n  .invoice-content .justify-end {\n    justify-content: flex-end !important;\n  }\n  \n  .invoice-content .items-start {\n    align-items: flex-start !important;\n  }\n  \n  /* Force display of table elements */\n  .invoice-content table {\n    width: 100% !important;\n    border-collapse: collapse !important;\n    margin-bottom: 32px !important;\n    display: table !important;\n  }\n  \n  .invoice-content thead, .invoice-content tbody {\n    display: table-header-group !important;\n  }\n  \n  .invoice-content tbody {\n    display: table-row-group !important;\n  }\n  \n  .invoice-content tr {\n    display: table-row !important;\n  }\n  \n  .invoice-content th, .invoice-content td {\n    display: table-cell !important;\n    padding: 12px !important;\n    border-bottom: 1px solid #e5e7eb !important;\n  }\n  \n  .invoice-content th {\n    background-color: #f9fafb !important;\n    font-weight: bold !important;\n    text-align: left !important;\n  }\n  \n  .invoice-content .text-right {\n    text-align: right !important;\n  }\n  \n  /* Typography styles */\n  .invoice-content h1 {\n    font-size: 36px !important;\n    font-weight: bold !important;\n    margin: 0 0 8px 0 !important;\n  }\n  \n  .invoice-content h3 {\n    font-weight: bold !important;\n    margin-bottom: 12px !important;\n  }\n  \n  .invoice-content p {\n    margin: 4px 0 !important;\n  }\n  \n  /* Spacing utilities */\n  .invoice-content .mb-2 { margin-bottom: 8px !important; }\n  .invoice-content .mb-3 { margin-bottom: 12px !important; }\n  .invoice-content .mb-6 { margin-bottom: 24px !important; }\n  .invoice-content .mb-8 { margin-bottom: 32px !important; }\n  .invoice-content .space-y-2 > * + * { margin-top: 8px !important; }\n  .invoice-content .gap-8 { gap: 32px !important; }\n  .invoice-content .space-x-2 > * + * { margin-left: 8px !important; }\n  \n  /* Make text darker for better print quality */\n  .invoice-content {\n    color: #000 !important;\n  }\n  \n  .invoice-content .text-gray-600 {\n    color: #666 !important;\n  }\n  \n  .invoice-content .text-gray-700 {\n    color: #333 !important;\n  }\n  \n  .invoice-content .text-primary {\n    color: #3b82f6 !important;\n  }\n  \n  /* Ensure all content displays */\n  .invoice-content .whitespace-pre-line {\n    white-space: pre-line !important;\n  }\n  \n  .invoice-content .font-medium {\n    font-weight: 500 !important;\n  }\n  \n  .invoice-content .font-semibold {\n    font-weight: 600 !important;\n  }\n  \n  .invoice-content .font-bold {\n    font-weight: bold !important;\n  }\n  \n  /* Ensure border styles */\n  .invoice-content .border-t {\n    border-top: 2px solid #374151 !important;\n  }\n  \n  .invoice-content .pt-2 {\n    padding-top: 8px !important;\n  }\n  \n  .invoice-content .w-full {\n    width: 100% !important;\n  }\n  \n  /* Color overrides for print */\n  .invoice-content .text-yellow-600 {\n    color: #d97706 !important;\n  }\n  \n  .invoice-content .text-green-600 {\n    color: #059669 !important;\n  }\n  \n  .invoice-content .text-red-600 {\n    color: #dc2626 !important;\n  }\n  \n  /* Ensure proper page margins for printing */\n  @page {\n    margin: 1cm;\n  }\n\n  /* Show dialog content when printing */\n  [role=\"dialog\"] {\n    position: static !important;\n    transform: none !important;\n    max-width: none !important;\n    max-height: none !important;\n    overflow: visible !important;\n    background: white !important;\n    box-shadow: none !important;\n    border: none !important;\n    margin: 0 !important;\n    padding: 0 !important;\n  }\n\n  /* Hide dialog overlay and non-essential elements when printing */\n  [data-radix-popper-content-wrapper],\n  [data-overlay-container],\n  .fixed.inset-0,\n  [role=\"dialog\"] > div:first-child {\n    position: static !important;\n    background: transparent !important;\n    backdrop-filter: none !important;\n  }\n\n  /* Ensure dialog header is hidden during print */\n  [role=\"dialog\"] h2[id*=\"dialog-title\"] {\n    display: none !important;\n  }\n}\n\n/* Loading screen animations */\n@keyframes fade-in {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.8s ease-out;\n}\n\n.animate-fade-in-delay {\n  animation: fade-in 0.8s ease-out 0.3s both;\n}\n","size_bytes":7994},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/client-search.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, Plus, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { type Client } from \"@shared/schema\";\n\ninterface ClientSearchProps {\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  onCreateNew?: (name: string) => void;\n}\n\nexport function ClientSearch({ \n  value, \n  onChange, \n  placeholder = \"Rechercher un client...\",\n  disabled = false,\n  onCreateNew\n}: ClientSearchProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  // Debounce search query\n  useEffect(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [searchQuery]);\n\n  // Fetch clients with search\n  const { data: clients = [], isLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\", debouncedQuery ? { search: debouncedQuery } : {}],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (debouncedQuery) {\n        params.append('search', debouncedQuery);\n      }\n      const response = await fetch(`/api/clients?${params.toString()}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch clients');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  // Fetch selected client separately to ensure it's always available for display\n  const { data: selectedClient } = useQuery<Client>({\n    queryKey: [\"/api/clients\", value],\n    queryFn: async () => {\n      const response = await fetch(`/api/clients/${value}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch client');\n      return response.json();\n    },\n    enabled: !!value,\n    retry: false,\n  });\n\n  const handleSelect = (clientId: string) => {\n    console.log(\"Client selection attempt:\", clientId);\n    \n    if (clientId === \"create-new\" && onCreateNew && searchQuery) {\n      onCreateNew(searchQuery);\n      setOpen(false);\n      setSearchQuery(\"\");\n      return;\n    }\n\n    const id = parseInt(clientId);\n    console.log(\"Parsed client ID:\", id);\n    \n    if (!isNaN(id)) {\n      onChange(id);\n      setOpen(false);\n      setSearchQuery(\"\");\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedClient ? (\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4\" />\n              <span>{selectedClient.name}</span>\n              {selectedClient.company && (\n                <span className=\"text-sm text-muted-foreground\">- {selectedClient.company}</span>\n              )}\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n        <Command shouldFilter={false} value=\"\" onValueChange={() => {}}>\n          <CommandInput \n            placeholder=\"Tapez pour rechercher...\" \n            value={searchQuery}\n            onValueChange={setSearchQuery}\n          />\n          <CommandList className=\"max-h-[200px] overflow-y-auto\">\n            {isLoading ? (\n              <CommandEmpty>Recherche en cours...</CommandEmpty>\n            ) : clients.length === 0 ? (\n              <CommandEmpty>\n                {searchQuery ? (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      Aucun client trouvé pour \"{searchQuery}\"\n                    </p>\n                    {onCreateNew && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSelect(\"create-new\")}\n                        className=\"text-primary\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Créer \"{searchQuery}\"\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  \"Aucun client trouvé\"\n                )}\n              </CommandEmpty>\n            ) : (\n              <CommandGroup>\n                {clients.map((client) => (\n                  <CommandItem\n                    key={client.id}\n                    value={client.id.toString()}\n                    onSelect={() => handleSelect(client.id.toString())}\n                    onClick={() => handleSelect(client.id.toString())}\n                    className=\"cursor-pointer hover:bg-gray-100\"\n                  >\n                    <Check\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        value === client.id ? \"opacity-100\" : \"opacity-0\"\n                      )}\n                    />\n                    <div className=\"flex flex-col\">\n                      <div className=\"flex items-center space-x-2\">\n                        <User className=\"w-4 h-4\" />\n                        <span className=\"font-medium\">{client.name}</span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {client.company && `${client.company} • `}\n                        {client.email}\n                      </div>\n                    </div>\n                  </CommandItem>\n                ))}\n                {searchQuery && onCreateNew && !clients.some(c => \n                  c.name.toLowerCase().includes(searchQuery.toLowerCase())\n                ) && (\n                  <CommandItem\n                    value=\"create-new\"\n                    onSelect={() => handleSelect(\"create-new\")}\n                    className=\"text-primary cursor-pointer\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Créer \"{searchQuery}\"\n                  </CommandItem>\n                )}\n              </CommandGroup>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":7009},"client/src/components/header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport { ReactNode } from \"react\";\n\ninterface HeaderProps {\n  title: string | ReactNode;\n  subtitle?: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n}\n\nexport default function Header({ title, subtitle, action }: HeaderProps) {\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">{title}</h2>\n          {subtitle && (\n            <p className=\"text-sm text-gray-500\">{subtitle}</p>\n          )}\n        </div>\n        {action && (\n          <div className=\"flex items-center space-x-4\">\n            <Button onClick={action.onClick}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              {action.label}\n            </Button>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-500\">Dernière synchronisation</p>\n              <p className=\"text-sm font-medium text-gray-900\">Il y a 2 minutes</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":1196},"client/src/components/invoice-pdf.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Download, Printer } from \"lucide-react\";\n\ninterface InvoicePDFProps {\n  invoice: any; // Full invoice with items and client\n  user?: any; // User information for company details\n}\n\nexport default function InvoicePDF({ invoice, user }: InvoicePDFProps) {\n  const formatCurrency = (amount: string | number) => {\n    const userSettings = JSON.parse(localStorage.getItem('userSettings') || '{\"currency\":\"XOF\"}');\n    const currency = userSettings.currency || 'XOF';\n    \n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    if (currency === 'XOF') {\n      return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n    } else if (currency === 'GHS') {\n      return `GH₵ ${numAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n    }\n    \n    // Fallback pour XOF par défaut\n    return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  const handlePrint = () => {\n    // Store original title\n    const originalTitle = document.title;\n    \n    // Change page title for print\n    document.title = `Facture ${invoice?.number || 'UNKNOWN'}`;\n    \n    // Open print dialog\n    window.print();\n    \n    // Restore original title after a short delay\n    setTimeout(() => {\n      document.title = originalTitle;\n    }, 100);\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      // Dynamically import jsPDF and html2canvas to avoid SSR issues\n      const { default: jsPDF } = await import('jspdf');\n      const { default: html2canvas } = await import('html2canvas');\n      \n      // Get the invoice content element\n      const element = document.querySelector('.invoice-content') as HTMLElement;\n      if (!element) {\n        console.error(\"Invoice content element not found\");\n        alert(\"Erreur: Contenu de la facture non trouvé\");\n        return;\n      }\n\n      // Hide action buttons temporarily for cleaner PDF\n      const actionButtons = element.parentElement?.querySelector('.print\\\\:hidden') as HTMLElement;\n      const originalDisplay = actionButtons?.style.display;\n      if (actionButtons) {\n        actionButtons.style.display = 'none';\n      }\n      \n      // Wait a moment for styles to apply\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // Generate canvas from HTML with better options\n      const canvas = await html2canvas(element, {\n        scale: 1.5,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: false,\n        removeContainer: true,\n        imageTimeout: 15000,\n        onclone: (clonedDoc) => {\n          // Remove any remaining print-hidden elements in the clone\n          const printHiddenElements = clonedDoc.querySelectorAll('.print\\\\:hidden');\n          printHiddenElements.forEach(el => el.remove());\n        }\n      });\n      \n      // Restore action buttons\n      if (actionButtons && originalDisplay !== undefined) {\n        actionButtons.style.display = originalDisplay;\n      }\n      \n      // Create PDF with proper dimensions\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4',\n      });\n      \n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 10;\n      const contentWidth = pageWidth - (2 * margin);\n      \n      // Calculate dimensions\n      const imgWidth = contentWidth;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      \n      // Add the image to PDF\n      const imgData = canvas.toDataURL('image/png', 0.95);\n      \n      if (imgHeight <= pageHeight - (2 * margin)) {\n        // Single page\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      } else {\n        // Multiple pages - use a simpler approach\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n        \n        // If content is too long, it will be cut off, but this is simpler and more reliable\n        // For very long invoices, users can use the print function instead\n      }\n      \n      // Generate filename with current date\n      const now = new Date();\n      const dateStr = now.toLocaleDateString('fr-FR').replace(/\\//g, '-');\n      const timeStr = now.toLocaleTimeString('fr-FR').replace(/:/g, '-');\n      const filename = `Facture_${invoice.number}_${dateStr}_${timeStr}.pdf`;\n      \n      // Save the PDF\n      pdf.save(filename);\n      \n      console.log('PDF généré avec succès:', filename);\n      \n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      alert(`Erreur lors de la génération du PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}. Veuillez réessayer.`);\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Action Buttons */}\n      <div className=\"flex justify-end space-x-2 mb-6 print:hidden\">\n        <Button variant=\"outline\" onClick={handlePrint}>\n          <Printer className=\"w-4 h-4 mr-2\" />\n          Imprimer\n        </Button>\n        <Button onClick={handleDownloadPDF}>\n          <Download className=\"w-4 h-4 mr-2\" />\n          Télécharger PDF\n        </Button>\n      </div>\n\n      {/* Invoice Content */}\n      <Card className=\"print:shadow-none print:border-none invoice-content\">\n        <CardContent className=\"p-8\">\n          {/* Header */}\n          <div className=\"flex justify-between items-start mb-8\">\n            <div className=\"flex items-start space-x-4\">\n\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">FACTURE</h1>\n                <p className=\"text-lg text-gray-600\">{invoice.number}</p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-primary mb-2\">\n                {user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}\n              </div>\n              <div className=\"text-sm text-gray-600\">\n                {user?.address && (\n                  <p className=\"whitespace-pre-line\">{user.address}</p>\n                )}\n                {user?.email && <p>Email: {user.email}</p>}\n                {user?.phone && <p>Tél: {user.phone}</p>}\n                {user?.businessType && <p>Activité: {user.businessType}</p>}\n              </div>\n            </div>\n          </div>\n\n          {/* Invoice Info and Client */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Facturé à :</h3>\n              <div className=\"text-gray-700\">\n                <p className=\"font-medium\">{invoice.client?.name}</p>\n                {invoice.client?.company && <p>{invoice.client.company}</p>}\n                {invoice.client?.email && <p>{invoice.client.email}</p>}\n                {invoice.client?.phone && <p>{invoice.client.phone}</p>}\n                {invoice.client?.address && (\n                  <p className=\"whitespace-pre-line\">{invoice.client.address}</p>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Détails de la facture :</h3>\n              <div className=\"space-y-2 text-gray-700\">\n                <div className=\"flex justify-between\">\n                  <span>Date d'émission :</span>\n                  <span>{invoice.createdAt && formatDate(invoice.createdAt)}</span>\n                </div>\n                {invoice.dueDate && (\n                  <div className=\"flex justify-between\">\n                    <span>Date d'échéance :</span>\n                    <span>{formatDate(invoice.dueDate)}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span>Statut :</span>\n                  <span className={`font-medium ${\n                    invoice.status === 'payee' ? 'text-green-600' :\n                    invoice.status === 'en_attente' ? 'text-yellow-600' :\n                    'text-red-600'\n                  }`}>\n                    {invoice.status === 'payee' ? 'Payée' :\n                     invoice.status === 'en_attente' ? 'En attente' :\n                     invoice.status === 'en_retard' ? 'En retard' :\n                     invoice.status === 'annulee' ? 'Annulée' :\n                     invoice.status === 'brouillon' ? 'Brouillon' :\n                     invoice.status === 'envoyee' ? 'Envoyée' :\n                     'Statut inconnu'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <Separator className=\"mb-8\" />\n\n          {/* Items Table */}\n          <div className=\"mb-8\">\n            <h3 className=\"font-semibold text-gray-900 mb-4\">Articles</h3>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse border border-gray-300\">\n                <thead>\n                  <tr className=\"bg-gray-50\">\n                    <th className=\"border border-gray-300 px-4 py-3 text-left font-medium text-gray-900\">\n                      Description\n                    </th>\n                    <th className=\"border border-gray-300 px-4 py-3 text-center font-medium text-gray-900\">\n                      Quantité\n                    </th>\n                    <th className=\"border border-gray-300 px-4 py-3 text-right font-medium text-gray-900\">\n                      Prix unitaire\n                    </th>\n                    <th className=\"border border-gray-300 px-4 py-3 text-right font-medium text-gray-900\">\n                      Total\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {invoice.items?.map((item: any, index: number) => (\n                    <tr key={index}>\n                      <td className=\"border border-gray-300 px-4 py-3 text-gray-900\">\n                        {item.productName}\n                      </td>\n                      <td className=\"border border-gray-300 px-4 py-3 text-center text-gray-900\">\n                        {item.quantity}\n                      </td>\n                      <td className=\"border border-gray-300 px-4 py-3 text-right text-gray-900\">\n                        {formatCurrency(item.priceHT)}\n                      </td>\n                      <td className=\"border border-gray-300 px-4 py-3 text-right font-medium text-gray-900\">\n                        {formatCurrency(item.totalHT)}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Totals */}\n          <div className=\"flex justify-end mb-8\">\n            <div className=\"w-full max-w-sm space-y-2\">\n              <div className=\"flex justify-between text-gray-700\">\n                <span>Sous-total :</span>\n                <span>{formatCurrency(invoice.totalHT)}</span>\n              </div>\n              <div className=\"flex justify-between text-gray-700\">\n                <span>TVA ({invoice.tvaRate}%) :</span>\n                <span>{formatCurrency(invoice.totalTVA)}</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between text-lg font-semibold text-gray-900\">\n                <span>Total :</span>\n                <span>{formatCurrency(invoice.totalTTC)}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Notes */}\n          {invoice.notes && (\n            <div className=\"mb-8\">\n              <h3 className=\"font-semibold text-gray-900 mb-3\">Notes :</h3>\n              <p className=\"text-gray-700 whitespace-pre-line\">{invoice.notes}</p>\n            </div>\n          )}\n\n          {/* Footer */}\n          <Separator className=\"mb-6\" />\n          <div className=\"text-center text-sm text-gray-500\">\n            <p>Merci pour votre confiance !</p>\n            {(user?.email || user?.phone) && (\n              <p className=\"mt-2\">\n                Pour toute question concernant cette facture, contactez-nous :\n                {user?.email && (\n                  <span className=\"block mt-1\">Email : {user.email}</span>\n                )}\n                {user?.phone && (\n                  <span className=\"block mt-1\">Téléphone : {user.phone}</span>\n                )}\n              </p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12773},"client/src/components/language-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Globe, Check } from \"lucide-react\";\nimport { languages } from \"@/lib/i18n\";\n\ninterface LanguageSelectorProps {\n  onLanguageSelect: (language: \"fr\" | \"en\") => void;\n}\n\nexport default function LanguageSelector({ onLanguageSelect }: LanguageSelectorProps) {\n  const [selectedLanguage, setSelectedLanguage] = useState<\"fr\" | \"en\">(\"fr\");\n\n  const handleConfirm = () => {\n    onLanguageSelect(selectedLanguage);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Globe className=\"text-white text-2xl\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900\">\n              YGestion\n            </CardTitle>\n            <p className=\"text-gray-600 mt-2\">\n              {selectedLanguage === 'fr' \n                ? 'Choisissez votre langue préférée' \n                : 'Choose your preferred language'\n              }\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            <div className=\"space-y-3\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                {selectedLanguage === 'fr' ? 'Langue' : 'Language'}\n              </label>\n              <Select value={selectedLanguage} onValueChange={(value: \"fr\" | \"en\") => setSelectedLanguage(value)}>\n                <SelectTrigger className=\"h-12\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {languages.map((language) => (\n                    <SelectItem key={language.value} value={language.value}>\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-2xl\">{language.value === 'fr' ? '🇫🇷' : '🇺🇸'}</span>\n                        <span>{language.label}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <p className=\"text-sm text-blue-800\">\n                {selectedLanguage === 'fr' \n                  ? 'Cette langue sera utilisée pour toute l\\'interface de l\\'application. Vous pourrez la modifier plus tard dans les paramètres.'\n                  : 'This language will be used for the entire application interface. You can change it later in the settings.'\n                }\n              </p>\n            </div>\n\n            <Button \n              onClick={handleConfirm}\n              className=\"w-full h-12 text-lg font-medium\"\n              size=\"lg\"\n            >\n              <Check className=\"w-5 h-5 mr-2\" />\n              {selectedLanguage === 'fr' ? 'Continuer' : 'Continue'}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3423},"client/src/components/loading-screen.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { BarChart3 } from \"lucide-react\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useTranslation } from \"@/lib/i18n\";\n\ninterface LoadingScreenProps {\n  onComplete: () => void;\n}\n\nexport default function LoadingScreen({ onComplete }: LoadingScreenProps) {\n  const [progress, setProgress] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  useEffect(() => {\n    // Simulate loading progress over 10 seconds\n    const totalDuration = 10000; // 10 seconds\n    const intervalTime = 100; // Update every 100ms\n    const totalSteps = totalDuration / intervalTime;\n    let currentStep = 0;\n\n    const progressInterval = setInterval(() => {\n      currentStep++;\n      const baseProgress = (currentStep / totalSteps) * 100;\n      // Add some randomness for more natural feel\n      const randomOffset = Math.random() * 3 - 1.5; // Random between -1.5 and 1.5\n      const newProgress = Math.min(100, Math.max(0, baseProgress + randomOffset));\n      \n      setProgress(newProgress);\n\n      if (currentStep >= totalSteps) {\n        clearInterval(progressInterval);\n        setProgress(100);\n        // Complete after showing 100% for a moment\n        setTimeout(() => {\n          setIsComplete(true);\n          setTimeout(onComplete, 500);\n        }, 500);\n      }\n    }, intervalTime);\n\n    return () => clearInterval(progressInterval);\n  }, [onComplete]);\n\n  return (\n    <div className={`fixed inset-0 bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center z-50 transition-opacity duration-500 ${isComplete ? 'opacity-0' : 'opacity-100'}`}>\n      <div className=\"text-center\">\n        {/* Logo Animation */}\n        <div className=\"mb-8 relative\">\n          <div className=\"w-24 h-24 bg-primary rounded-2xl flex items-center justify-center mx-auto shadow-lg animate-pulse\">\n            <BarChart3 className=\"text-white text-4xl animate-bounce\" />\n          </div>\n          \n          {/* Animated rings around logo */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-32 h-32 border-4 border-primary/20 rounded-full animate-spin\"></div>\n          </div>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-40 h-40 border-2 border-primary/10 rounded-full animate-ping\"></div>\n          </div>\n        </div>\n\n        {/* App Title */}\n        <h1 className=\"text-4xl font-bold text-gray-800 mb-2 animate-fade-in\">\n          YGestion\n        </h1>\n        <p className=\"text-lg text-gray-600 mb-8 animate-fade-in-delay\">\n          {settings?.language === 'en' ? 'Simplified business management' : 'Gestion d\\'entreprise simplifiée'}\n        </p>\n\n        {/* Progress Bar */}\n        <div className=\"w-64 mx-auto\">\n          <div className=\"bg-gray-200 rounded-full h-2 mb-4\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300 ease-out\"\n              style={{ width: `${Math.min(progress, 100)}%` }}\n            ></div>\n          </div>\n          <p className=\"text-sm text-gray-500\">\n            {settings?.language === 'en' ? 'Loading...' : 'Chargement...'} {Math.floor(Math.min(progress, 100))}%\n          </p>\n        </div>\n\n        {/* Loading dots */}\n        <div className=\"flex justify-center mt-6 space-x-1\">\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n        </div>\n      </div>\n\n\n    </div>\n  );\n}","size_bytes":3869},"client/src/components/logo-upload.tsx":{"content":"import { useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Upload, X, Image as ImageIcon } from 'lucide-react';\nimport { useTranslation } from '@/lib/i18n';\nimport { useSettings } from '@/hooks/useSettings';\n\nexport default function LogoUpload() {\n  const { toast } = useToast();\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n\n  // Get current user data to access logo\n  const { data: user } = useQuery({\n    queryKey: ['/api/user'],\n    retry: false,\n  });\n\n  const uploadLogoMutation = useMutation({\n    mutationFn: async (logoData: string) => {\n      const response = await fetch('/api/user/logo', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ logo: logoData }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({\n        title: t('success'),\n        description: settings?.language === 'en' ? 'Logo uploaded successfully' : 'Logo téléchargé avec succès',\n      });\n      setPreviewUrl(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: t('error'),\n        description: error.message || (settings?.language === 'en' ? 'Failed to upload logo' : 'Erreur lors du téléchargement du logo'),\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const removeLogoMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/user/logo', {\n        method: 'DELETE',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Remove failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({\n        title: t('success'),\n        description: settings?.language === 'en' ? 'Logo removed successfully' : 'Logo supprimé avec succès',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t('error'),\n        description: error.message || (settings?.language === 'en' ? 'Failed to remove logo' : 'Erreur lors de la suppression du logo'),\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    const file = acceptedFiles[0];\n    if (!file) return;\n\n    // Check file size (10MB limit)\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: t('error'),\n        description: settings?.language === 'en' ? 'Image too large (max 10MB)' : 'Image trop volumineuse (max 10MB)',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      setPreviewUrl(result);\n    };\n    reader.readAsDataURL(file);\n  }, [toast, t, settings?.language]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp']\n    },\n    maxFiles: 1,\n  });\n\n  const handleUpload = () => {\n    if (previewUrl) {\n      uploadLogoMutation.mutate(previewUrl);\n    }\n  };\n\n  const handleRemove = () => {\n    removeLogoMutation.mutate();\n  };\n\n  const currentLogo = (user as any)?.companyLogo;\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Current Logo Display */}\n      {currentLogo && (\n        <div className=\"flex items-center justify-between p-4 border rounded-lg bg-gray-50\">\n          <div className=\"flex items-center space-x-3\">\n            <img \n              src={currentLogo} \n              alt=\"Company Logo\" \n              className=\"w-12 h-12 object-contain border rounded\"\n            />\n            <div>\n              <p className=\"font-medium text-sm\">{t('logoPreview')}</p>\n              <p className=\"text-xs text-gray-500\">\n                {settings?.language === 'en' ? 'Current company logo' : 'Logo actuel de l\\'entreprise'}\n              </p>\n            </div>\n          </div>\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleRemove}\n            disabled={removeLogoMutation.isPending}\n          >\n            <X className=\"w-4 h-4 mr-1\" />\n            {t('removeLogo')}\n          </Button>\n        </div>\n      )}\n\n      {/* Upload Area */}\n      {previewUrl ? (\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"text-center space-y-4\">\n              <img \n                src={previewUrl} \n                alt=\"Preview\" \n                className=\"mx-auto max-w-32 max-h-32 object-contain border rounded\"\n              />\n              <div className=\"flex gap-2 justify-center\">\n                <Button \n                  onClick={handleUpload}\n                  disabled={uploadLogoMutation.isPending}\n                >\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  {uploadLogoMutation.isPending ? \n                    (settings?.language === 'en' ? 'Uploading...' : 'Téléchargement...') : \n                    t('uploadLogo')\n                  }\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setPreviewUrl(null)}\n                >\n                  {t('cancel')}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div \n              {...getRootProps()} \n              className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n                isDragActive ? 'border-primary bg-primary/5' : 'border-gray-300 hover:border-gray-400'\n              }`}\n            >\n              <input {...getInputProps()} />\n              <ImageIcon className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n              {isDragActive ? (\n                <p className=\"text-primary\">\n                  {settings?.language === 'en' ? 'Drop the logo here...' : 'Déposez le logo ici...'}\n                </p>\n              ) : (\n                <div className=\"space-y-2\">\n                  <p className=\"text-gray-600\">\n                    {settings?.language === 'en' \n                      ? 'Drag and drop your company logo here, or click to select'\n                      : 'Glissez-déposez le logo de votre entreprise ici, ou cliquez pour sélectionner'\n                    }\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    {settings?.language === 'en' \n                      ? 'PNG, JPG, GIF up to 2MB'\n                      : 'PNG, JPG, GIF jusqu\\'à 2MB'\n                    }\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":7513},"client/src/components/product-combobox.tsx":{"content":"import { useState } from \"react\";\nimport { Check, ChevronsUpDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { type Product } from \"@shared/schema\";\n\ninterface ProductComboboxProps {\n  products: Product[];\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nexport function ProductCombobox({ \n  products, \n  value, \n  onChange, \n  placeholder = \"Sélectionner un produit...\",\n  disabled = false \n}: ProductComboboxProps) {\n  const [open, setOpen] = useState(false);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const selectedProduct = products.find((product) => product.id === value);\n\n  const filteredProducts = products.filter((product) =>\n    product.name.toLowerCase().includes(searchValue.toLowerCase()) ||\n    product.id.toString().includes(searchValue)\n  );\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedProduct ? selectedProduct.name : placeholder}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\">\n        <Command>\n          <CommandInput \n            placeholder=\"Rechercher un produit...\" \n            value={searchValue}\n            onValueChange={setSearchValue}\n          />\n          <CommandList>\n            <CommandEmpty>Aucun produit trouvé.</CommandEmpty>\n            <CommandGroup>\n              {filteredProducts.map((product) => (\n                <CommandItem\n                  key={product.id}\n                  value={product.id.toString()}\n                  onSelect={(currentValue) => {\n                    const productId = parseInt(currentValue);\n                    onChange(productId === value ? undefined : productId);\n                    setOpen(false);\n                    setSearchValue(\"\");\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === product.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex flex-col\">\n                    <span>{product.name}</span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {Number(product.priceHT).toLocaleString('fr-FR')} XOF HT\n                      {product.stock !== undefined && ` • Stock: ${product.stock}`}\n                    </span>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":3164},"client/src/components/product-search.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, Plus, Package } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { type Product } from \"@shared/schema\";\n\ninterface ProductSearchProps {\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  onCreateNew?: (name: string) => void;\n  onProductSelect?: (product: Product) => void;\n}\n\nexport function ProductSearch({ \n  value, \n  onChange, \n  placeholder = \"Rechercher un produit...\",\n  disabled = false,\n  onCreateNew,\n  onProductSelect\n}: ProductSearchProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  // Debounce search query\n  useEffect(() => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, 300);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [searchQuery]);\n\n  // Fetch products with search\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", debouncedQuery ? { search: debouncedQuery } : {}],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (debouncedQuery) {\n        params.append('search', debouncedQuery);\n      }\n      const response = await fetch(`/api/products?${params.toString()}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json();\n    },\n    retry: false,\n  });\n\n  // Fetch selected product separately to ensure it's always available for display\n  const { data: selectedProduct } = useQuery<Product>({\n    queryKey: [\"/api/products\", value],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${value}`, {\n        credentials: 'include'\n      });\n      if (!response.ok) throw new Error('Failed to fetch product');\n      return response.json();\n    },\n    enabled: !!value,\n    retry: false,\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n  };\n\n  const handleSelect = (productId: string) => {\n    console.log(\"Product selection attempt:\", productId);\n    \n    if (productId === \"create-new\" && onCreateNew && searchQuery) {\n      onCreateNew(searchQuery);\n      setOpen(false);\n      setSearchQuery(\"\");\n      return;\n    }\n\n    const id = parseInt(productId);\n    console.log(\"Parsed product ID:\", id);\n    \n    if (!isNaN(id)) {\n      const product = products.find(p => p.id === id);\n      \n      onChange(id);\n      if (product && onProductSelect) {\n        onProductSelect(product);\n      }\n      \n      setOpen(false);\n      setSearchQuery(\"\");\n    }\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedProduct ? (\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"w-4 h-4\" />\n              <span>{selectedProduct.name}</span>\n              <span className=\"text-sm text-muted-foreground\">\n                • {formatCurrency(selectedProduct.priceHT)} HT\n                {selectedProduct.stock !== undefined && ` • Stock: ${selectedProduct.stock}`}\n              </span>\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n        <Command shouldFilter={false} value=\"\" onValueChange={() => {}}>\n          <CommandInput \n            placeholder=\"Tapez pour rechercher...\" \n            value={searchQuery}\n            onValueChange={setSearchQuery}\n          />\n          <CommandList className=\"max-h-[200px] overflow-y-auto\">\n            {isLoading ? (\n              <CommandEmpty>Recherche en cours...</CommandEmpty>\n            ) : products.length === 0 ? (\n              <CommandEmpty>\n                {searchQuery ? (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      Aucun produit trouvé pour \"{searchQuery}\"\n                    </p>\n                    {onCreateNew && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleSelect(\"create-new\")}\n                        className=\"text-primary\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Créer \"{searchQuery}\"\n                      </Button>\n                    )}\n                  </div>\n                ) : (\n                  \"Aucun produit trouvé\"\n                )}\n              </CommandEmpty>\n            ) : (\n              <CommandGroup>\n                {products.map((product) => (\n                  <CommandItem\n                    key={product.id}\n                    value={product.id.toString()}\n                    onSelect={() => handleSelect(product.id.toString())}\n                    onClick={() => handleSelect(product.id.toString())}\n                    className=\"cursor-pointer hover:bg-gray-100\"\n                  >\n                    <Check\n                      className={cn(\n                        \"mr-2 h-4 w-4\",\n                        value === product.id ? \"opacity-100\" : \"opacity-0\"\n                      )}\n                    />\n                    <div className=\"flex flex-col w-full\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Package className=\"w-4 h-4\" />\n                          <span className=\"font-medium\">{product.name}</span>\n                        </div>\n                        <span className=\"text-sm font-medium\">\n                          {formatCurrency(product.priceHT)} HT\n                        </span>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {product.description && `${product.description} • `}\n                        {product.stock !== undefined && `Stock: ${product.stock}`}\n                      </div>\n                    </div>\n                  </CommandItem>\n                ))}\n                {searchQuery && onCreateNew && !products.some(p => \n                  p.name.toLowerCase().includes(searchQuery.toLowerCase())\n                ) && (\n                  <CommandItem\n                    value=\"create-new\"\n                    onSelect={() => handleSelect(\"create-new\")}\n                    className=\"text-primary cursor-pointer\"\n                  >\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Créer \"{searchQuery}\"\n                  </CommandItem>\n                )}\n              </CommandGroup>\n            )}\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":7890},"client/src/components/profile-editor.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useTranslation } from '@/lib/i18n';\nimport { useSettings } from '@/hooks/useSettings';\nimport { Save } from 'lucide-react';\n\nconst profileSchema = z.object({\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  position: z.string().optional(),\n  address: z.string().optional(),\n  businessType: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nexport default function ProfileEditor() {\n  const { toast } = useToast();\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  // Get current user data\n  const { data: user } = useQuery({\n    queryKey: ['/api/user'],\n    retry: false,\n  });\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      phone: '',\n      company: '',\n      position: '',\n      address: '',\n      businessType: '',\n    },\n  });\n\n  // Update form when user data is loaded\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        firstName: (user as any).firstName || '',\n        lastName: (user as any).lastName || '',\n        phone: (user as any).phone || '',\n        company: (user as any).company || '',\n        position: (user as any).position || '',\n        address: (user as any).address || '',\n        businessType: (user as any).businessType || '',\n      });\n    }\n  }, [user, form]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileFormData) => {\n      const response = await fetch('/api/auth/complete-profile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Update failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      toast({\n        title: t('success'),\n        description: settings?.language === 'en' ? 'Profile updated successfully' : 'Profil mis à jour avec succès',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: t('error'),\n        description: error.message || (settings?.language === 'en' ? 'Failed to update profile' : 'Erreur lors de la mise à jour du profil'),\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"firstName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profileFirstName')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'First name' : 'Prénom'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"lastName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profileLastName')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Last name' : 'Nom'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profilePhone')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Phone number' : 'Numéro de téléphone'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"company\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profileCompany')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Company name' : 'Nom de l\\'entreprise'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"position\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profilePosition')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Position/Title' : 'Poste/Titre'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"businessType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>{t('profileBusinessType')}</FormLabel>\n                <FormControl>\n                  <Input placeholder={settings?.language === 'en' ? 'Business type' : 'Type d\\'activité'} {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"address\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>{t('profileAddress')}</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder={settings?.language === 'en' ? 'Complete address' : 'Adresse complète'} \n                  className=\"min-h-[100px]\"\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end\">\n          <Button \n            type=\"submit\" \n            disabled={updateProfileMutation.isPending}\n            className=\"flex items-center gap-2\"\n          >\n            <Save className=\"w-4 h-4\" />\n            {updateProfileMutation.isPending\n              ? (settings?.language === 'en' ? 'Updating...' : 'Mise à jour...')\n              : t('updateProfile')\n            }\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":7474},"client/src/components/sidebar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  BarChart3, \n  Users, \n  Package, \n  Tags, \n  FileText, \n  TrendingUp, \n  Settings, \n  Download,\n  LogOut,\n  X,\n  Shield\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useTranslation } from \"@/lib/i18n\";\n\n\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  const navigation = [\n    { name: t('dashboard'), href: \"/\", icon: BarChart3 },\n    { name: t('clients'), href: \"/clients\", icon: Users },\n    { name: t('products'), href: \"/products\", icon: Package },\n    { name: t('categories'), href: \"/categories\", icon: Tags },\n    { name: t('invoices'), href: \"/invoices\", icon: FileText },\n    { name: t('sales'), href: \"/sales\", icon: TrendingUp },\n  ];\n\n  const secondaryNavigation = [\n    { name: t('settings'), href: \"/settings\", icon: Settings },\n    { name: t('export'), href: \"/export\", icon: Download },\n  ];\n\n  // Add admin navigation for Fatimata\n  const adminNavigation = [\n    { name: \"Admin Licences\", href: \"/admin\", icon: Shield },\n  ];\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg border-r border-gray-200 flex flex-col\">\n      {/* Logo and Title */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <BarChart3 className=\"text-white text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-gray-900\">YGestion</h1>\n            <p className=\"text-sm text-gray-500\">v1.0.0</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 px-4 py-6 space-y-2\">\n        {navigation.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href;\n          \n          return (\n            <Link key={item.name} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                className={cn(\n                  \"w-full justify-start\",\n                  isActive\n                    ? \"bg-primary text-white hover:bg-primary/90\"\n                    : \"text-gray-700 hover:bg-gray-100\"\n                )}\n              >\n                <Icon className=\"mr-3 h-4 w-4\" />\n                {item.name}\n              </Button>\n            </Link>\n          );\n        })}\n        \n        <div className=\"border-t border-gray-200 pt-4 mt-4 space-y-2\">\n          {secondaryNavigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <Button\n                  variant=\"ghost\"\n                  className={cn(\n                    \"w-full justify-start\",\n                    isActive\n                      ? \"bg-primary text-white hover:bg-primary/90\"\n                      : \"text-gray-700 hover:bg-gray-100\"\n                  )}\n                >\n                  <Icon className=\"mr-3 h-4 w-4\" />\n                  {item.name}\n                </Button>\n              </Link>\n            );\n          })}\n\n          {/* Admin navigation for Youssouphafils */}\n          {(user?.firstName?.toLowerCase() === \"youssouphafils\" || user?.email?.toLowerCase().includes(\"youssouphafils\")) && (\n            <div className=\"border-t border-gray-200 pt-2 mt-2\">\n              {adminNavigation.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.href;\n                \n                return (\n                  <Link key={item.name} href={item.href}>\n                    <Button\n                      variant=\"ghost\"\n                      className={cn(\n                        \"w-full justify-start\",\n                        isActive\n                          ? \"bg-purple-600 text-white hover:bg-purple-700\"\n                          : \"text-purple-700 hover:bg-purple-50\"\n                      )}\n                    >\n                      <Icon className=\"mr-3 h-4 w-4\" />\n                      {item.name}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center overflow-hidden\">\n            {user?.profileImageUrl ? (\n              <img \n                src={user.profileImageUrl} \n                alt=\"Profile\" \n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <Users className=\"w-4 h-4 text-gray-600\" />\n            )}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\">\n              {user?.firstName && user?.lastName \n                ? `${user.firstName} ${user.lastName}`\n                : user?.email || \"Utilisateur\"\n              }\n            </p>\n            <p className=\"text-xs text-gray-500\">Administrateur</p>\n          </div>\n          <div className=\"flex space-x-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-400 hover:text-red-600\"\n              onClick={() => {\n                if (confirm(settings?.language === 'en' \n                  ? 'Are you sure you want to close the application?' \n                  : 'Êtes-vous sûr de vouloir fermer l\\'application ?'\n                )) {\n                  window.close();\n                }\n              }}\n              title={settings?.language === 'en' ? 'Close Application' : 'Fermer l\\'application'}\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-gray-400 hover:text-gray-600\"\n              onClick={async () => {\n                try {\n                  await fetch('/api/logout', { method: 'POST' });\n                  window.location.href = '/';\n                } catch (error) {\n                  console.error('Erreur lors de la déconnexion:', error);\n                }\n              }}\n              title={settings?.language === 'en' ? 'Logout' : 'Se déconnecter'}\n            >\n              <LogOut className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6834},"client/src/components/simple-client-select.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport { type Client } from \"@shared/schema\";\n\ninterface SimpleClientSelectProps {\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nexport function SimpleClientSelect({ \n  value, \n  onChange, \n  placeholder = \"Rechercher ou créer un client...\",\n  disabled = false,\n}: SimpleClientSelectProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch all clients\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n    retry: false,\n  });\n\n  // Get selected client\n  const selectedClient = clients.find(c => c.id === value);\n\n  // Filter clients based on search\n  const filteredClients = clients.filter(client =>\n    client.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (client.email && client.email.toLowerCase().includes(searchQuery.toLowerCase())) ||\n    (client.company && client.company.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleSelect = (clientId: number) => {\n    onChange(clientId);\n    setOpen(false);\n    setSearchQuery(\"\");\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedClient ? (\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4\" />\n              <span>{selectedClient.name}</span>\n              {selectedClient.company && (\n                <span className=\"text-sm text-muted-foreground\">- {selectedClient.company}</span>\n              )}\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n        <div className=\"p-3 border-b\">\n          <Input\n            placeholder=\"Tapez pour rechercher...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"h-9\"\n          />\n        </div>\n        <div className=\"max-h-[200px] overflow-y-auto\">\n          {filteredClients.length === 0 ? (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              {searchQuery ? `Aucun client trouvé pour \"${searchQuery}\"` : \"Aucun client trouvé\"}\n            </div>\n          ) : (\n            <div className=\"p-1\">\n              {filteredClients.map((client) => (\n                <div\n                  key={client.id}\n                  onClick={() => handleSelect(client.id)}\n                  className={cn(\n                    \"flex items-center space-x-2 rounded-sm px-2 py-2 cursor-pointer hover:bg-accent hover:text-accent-foreground\",\n                    value === client.id && \"bg-accent text-accent-foreground\"\n                  )}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === client.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex flex-col flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      <User className=\"w-4 h-4\" />\n                      <span className=\"font-medium\">{client.name}</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {client.company && `${client.company} • `}\n                      {client.email}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":4310},"client/src/components/simple-product-select-v2.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Check, ChevronsUpDown, Package } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Input } from \"@/components/ui/input\";\nimport { type Product } from \"@shared/schema\";\n\ninterface SimpleProductSelectProps {\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  onProductSelect?: (product: Product) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nexport function SimpleProductSelectV2({ \n  value, \n  onChange, \n  onProductSelect,\n  placeholder = \"Rechercher un produit...\",\n  disabled = false,\n}: SimpleProductSelectProps) {\n  const [open, setOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Fetch all products\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n  });\n\n  // Get selected product\n  const selectedProduct = products.find(p => p.id === value);\n\n  // Filter products based on search\n  const filteredProducts = products.filter(product =>\n    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (product.description && product.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n  };\n\n  const handleSelect = (productId: number) => {\n    const product = products.find(p => p.id === productId);\n    \n    onChange(productId);\n    if (product && onProductSelect) {\n      onProductSelect(product);\n    }\n    \n    setOpen(false);\n    setSearchQuery(\"\");\n  };\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between\"\n          disabled={disabled}\n        >\n          {selectedProduct ? (\n            <div className=\"flex items-center space-x-2\">\n              <Package className=\"w-4 h-4\" />\n              <span>{selectedProduct.name}</span>\n              <span className=\"text-sm text-muted-foreground\">\n                • {formatCurrency(selectedProduct.priceHT)} HT\n                {selectedProduct.stock !== undefined && ` • Stock: ${selectedProduct.stock}`}\n              </span>\n            </div>\n          ) : (\n            <span className=\"text-muted-foreground\">{placeholder}</span>\n          )}\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[400px] p-0\" align=\"start\">\n        <div className=\"p-3 border-b\">\n          <Input\n            placeholder=\"Tapez pour rechercher...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"h-9\"\n          />\n        </div>\n        <div className=\"max-h-[200px] overflow-y-auto\">\n          {filteredProducts.length === 0 ? (\n            <div className=\"p-4 text-center text-sm text-muted-foreground\">\n              {searchQuery ? `Aucun produit trouvé pour \"${searchQuery}\"` : \"Aucun produit trouvé\"}\n            </div>\n          ) : (\n            <div className=\"p-1\">\n              {filteredProducts.map((product) => (\n                <div\n                  key={product.id}\n                  onClick={() => handleSelect(product.id)}\n                  className={cn(\n                    \"flex items-center space-x-2 rounded-sm px-2 py-2 cursor-pointer hover:bg-accent hover:text-accent-foreground\",\n                    value === product.id && \"bg-accent text-accent-foreground\"\n                  )}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === product.id ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  <div className=\"flex flex-col w-full\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Package className=\"w-4 h-4\" />\n                        <span className=\"font-medium\">{product.name}</span>\n                      </div>\n                      <span className=\"text-sm font-medium\">\n                        {formatCurrency(product.priceHT)} HT\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {product.description && `${product.description} • `}\n                      {product.stock !== undefined && `Stock: ${product.stock}`}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":5077},"client/src/components/simple-product-select.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { type Product } from \"@shared/schema\";\n\ninterface SimpleProductSelectProps {\n  products: Product[];\n  value?: number;\n  onChange: (value: number | undefined) => void;\n  placeholder?: string;\n  disabled?: boolean;\n}\n\nexport function SimpleProductSelect({ \n  products, \n  value, \n  onChange, \n  placeholder = \"Sélectionner un produit...\",\n  disabled = false \n}: SimpleProductSelectProps) {\n  const selectedProduct = products.find((product) => product.id === value);\n\n  return (\n    <Select \n      onValueChange={(selectedValue) => {\n        if (selectedValue === \"\") {\n          onChange(undefined);\n        } else {\n          onChange(parseInt(selectedValue));\n        }\n      }}\n      value={value ? value.toString() : \"\"}\n      disabled={disabled}\n    >\n      <SelectTrigger className=\"w-full\">\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {products.map((product) => (\n          <SelectItem key={product.id} value={product.id.toString()}>\n            <div className=\"flex flex-col\">\n              <span>{product.name}</span>\n              <span className=\"text-sm text-muted-foreground\">\n                {Number(product.priceHT).toLocaleString('fr-FR')} XOF HT\n                {product.stock !== undefined && ` • Stock: ${product.stock}`}\n              </span>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}","size_bytes":1533},"client/src/components/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  changeType?: \"positive\" | \"negative\" | \"neutral\";\n  icon: LucideIcon;\n  iconColor: string;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  change, \n  changeType = \"neutral\", \n  icon: Icon, \n  iconColor \n}: StatsCardProps) {\n  const getChangeColor = () => {\n    switch (changeType) {\n      case \"positive\":\n        return \"text-green-600\";\n      case \"negative\":\n        return \"text-red-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-500\">{title}</p>\n            <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n            {change && (\n              <p className={`text-sm mt-1 ${getChangeColor()}`}>\n                {change}\n              </p>\n            )}\n          </div>\n          <div className={`w-12 h-12 ${iconColor} rounded-lg flex items-center justify-center`}>\n            <Icon className=\"text-xl\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1314},"client/src/components/sync-status.tsx":{"content":"import { RefreshCw, Wifi, WifiOff } from 'lucide-react';\nimport { useTranslation } from '@/lib/i18n';\nimport { useSettings } from '@/hooks/useSettings';\nimport { Badge } from '@/components/ui/badge';\n\ninterface SyncStatusProps {\n  isOnline?: boolean;\n  isSyncing?: boolean;\n  lastSync?: Date;\n}\n\nexport default function SyncStatus({ isOnline = true, isSyncing = false, lastSync }: SyncStatusProps) {\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  const formatLastSync = (date: Date) => {\n    const now = new Date();\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (diffInSeconds < 60) {\n      return settings?.language === 'en' ? 'Just now' : 'À l\\'instant';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return settings?.language === 'en' \n        ? `${minutes}m ago` \n        : `il y a ${minutes}m`;\n    } else {\n      return date.toLocaleTimeString(settings?.language === 'en' ? 'en-US' : 'fr-FR', {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  };\n\n  if (!isOnline) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Badge variant=\"destructive\" className=\"flex items-center gap-2 px-3 py-2\">\n          <WifiOff className=\"w-4 h-4\" />\n          <span className=\"text-sm\">\n            {settings?.language === 'en' ? 'Offline' : 'Hors ligne'}\n          </span>\n        </Badge>\n      </div>\n    );\n  }\n\n  if (isSyncing) {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50\">\n        <Badge variant=\"secondary\" className=\"flex items-center gap-2 px-3 py-2 bg-blue-50 text-blue-700 border-blue-200\">\n          <RefreshCw className=\"w-4 h-4 animate-spin\" />\n          <span className=\"text-sm\">\n            {settings?.language === 'en' ? 'Syncing...' : 'Synchronisation...'}\n          </span>\n        </Badge>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      <Badge variant=\"secondary\" className=\"flex items-center gap-2 px-3 py-2 bg-green-50 text-green-700 border-green-200\">\n        <Wifi className=\"w-4 h-4\" />\n        <span className=\"text-sm\">\n          {settings?.language === 'en' ? 'Live data' : 'Données en temps réel'}\n          {lastSync && (\n            <span className=\"ml-1 text-xs opacity-75\">\n              • {formatLastSync(lastSync)}\n            </span>\n          )}\n        </span>\n      </Badge>\n    </div>\n  );\n}","size_bytes":2481},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":400},"client/src/hooks/useSettings.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"./useAuth\";\nimport { Language } from \"@/lib/i18n\";\nimport { useEffect } from \"react\";\n\nexport interface UserSettings {\n  currency: string;\n  language: Language;\n}\n\nexport function useSettings() {\n  const { user } = useAuth();\n\n  // Get the preferred language from localStorage if set during initial language selection\n  const getInitialLanguage = (): Language => {\n    const preferredLanguage = localStorage.getItem('preferredLanguage');\n    return (preferredLanguage as Language) || \"fr\";\n  };\n\n  const { data: settings, isLoading } = useQuery<UserSettings>({\n    queryKey: [\"/api/user/settings\"],\n    enabled: !!user,\n    select: (data: any) => ({\n      currency: data?.currency || \"XOF\",\n      language: (data?.language || getInitialLanguage()) as Language,\n    }),\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (newSettings: Partial<UserSettings>) => {\n      const response = await fetch(\"/api/user/settings\", {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newSettings),\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur de mise à jour des paramètres\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/settings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n  });\n\n  // Sync initial language preference with user settings if not already set\n  useEffect(() => {\n    const preferredLanguage = localStorage.getItem('preferredLanguage');\n    const hasBeenSynced = localStorage.getItem('languageSynced');\n    \n    if (user && settings && preferredLanguage && !hasBeenSynced) {\n      // If the preferred language is different from current settings, update it\n      if (settings.language !== preferredLanguage) {\n        updateSettingsMutation.mutate({\n          language: preferredLanguage as Language,\n          currency: settings.currency\n        });\n        localStorage.setItem('languageSynced', 'true');\n      }\n    }\n  }, [user, settings, updateSettingsMutation]);\n\n  return {\n    settings,\n    isLoading,\n    updateSettings: updateSettingsMutation.mutate,\n    isUpdating: updateSettingsMutation.isPending,\n  };\n}","size_bytes":2497},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/i18n.ts":{"content":"// Système de traduction pour l'application\nexport type Language = 'fr' | 'en';\n\nexport interface Translations {\n  // Navigation\n  dashboard: string;\n  clients: string;\n  products: string;\n  categories: string;\n  invoices: string;\n  sales: string;\n  settings: string;\n  export: string;\n  logout: string;\n\n  // Actions communes\n  create: string;\n  edit: string;\n  delete: string;\n  save: string;\n  cancel: string;\n  search: string;\n  loading: string;\n  \n  // Dashboard\n  revenue: string;\n  invoiceCount: string;\n  clientCount: string;\n  productCount: string;\n  recentInvoices: string;\n  topProducts: string;\n  \n  // Clients\n  clientName: string;\n  email: string;\n  phone: string;\n  address: string;\n  company: string;\n  newClient: string;\n  editClient: string;\n  \n  // Products\n  productName: string;\n  description: string;\n  price: string;\n  stock: string;\n  category: string;\n  taxRate: string;\n  newProduct: string;\n  editProduct: string;\n  \n  // Invoices\n  invoiceNumber: string;\n  client: string;\n  status: string;\n  total: string;\n  dueDate: string;\n  pending: string;\n  paid: string;\n  overdue: string;\n  newInvoice: string;\n  \n  // Settings\n  language: string;\n  currency: string;\n  profile: string;\n  preferences: string;\n\n  personalInfo: string;\n  updateProfile: string;\n  profileFirstName: string;\n  profileLastName: string;\n  profilePhone: string;\n  profileCompany: string;\n  profilePosition: string;\n  profileAddress: string;\n  profileBusinessType: string;\n  \n  // Messages\n  success: string;\n  error: string;\n  confirmDelete: string;\n  noData: string;\n  \n  // Landing page\n  appTitle: string;\n  appDescription: string;\n  loginButton: string;\n  createAccountButton: string;\n  newUserText: string;\n  clientManagement: string;\n  clientManagementDesc: string;\n  productCatalog: string;\n  productCatalogDesc: string;\n  invoicing: string;\n  invoicingDesc: string;\n  reporting: string;\n  reportingDesc: string;\n  whyChoose: string;\n  modernInterface: string;\n  modernInterfaceDesc: string;\n  secure: string;\n  secureDesc: string;\n  dashboardTitle: string;\n  dashboardDesc: string;\n  readyToOptimize: string;\n  joinCompanies: string;\n  startNow: string;\n}\n\nexport const translations: Record<Language, Translations> = {\n  fr: {\n    // Navigation\n    dashboard: \"Tableau de bord\",\n    clients: \"Clients\",\n    products: \"Produits\",\n    categories: \"Catégories\", \n    invoices: \"Factures\",\n    sales: \"Ventes\",\n    settings: \"Paramètres\",\n    export: \"Export\",\n    logout: \"Déconnexion\",\n\n    // Actions communes\n    create: \"Créer\",\n    edit: \"Modifier\",\n    delete: \"Supprimer\",\n    save: \"Enregistrer\",\n    cancel: \"Annuler\",\n    search: \"Rechercher\",\n    loading: \"Chargement...\",\n    \n    // Dashboard\n    revenue: \"Chiffre d'affaires\",\n    invoiceCount: \"Factures\",\n    clientCount: \"Clients\",\n    productCount: \"Produits\",\n    recentInvoices: \"Factures récentes\",\n    topProducts: \"Produits populaires\",\n    \n    // Clients\n    clientName: \"Nom du client\",\n    email: \"Email\",\n    phone: \"Téléphone\",\n    address: \"Adresse\",\n    company: \"Entreprise\",\n    newClient: \"Nouveau Client\",\n    editClient: \"Modifier le Client\",\n    \n    // Products\n    productName: \"Nom du produit\",\n    description: \"Description\",\n    price: \"Prix\",\n    stock: \"Stock\",\n    category: \"Catégorie\",\n    taxRate: \"Taux de TVA\",\n    newProduct: \"Nouveau Produit\",\n    editProduct: \"Modifier le Produit\",\n    \n    // Invoices\n    invoiceNumber: \"Numéro de facture\",\n    client: \"Client\",\n    status: \"Statut\",\n    total: \"Total\",\n    dueDate: \"Date d'échéance\",\n    pending: \"En attente\",\n    paid: \"Payée\",\n    overdue: \"En retard\",\n    newInvoice: \"Nouvelle Facture\",\n    \n    // Settings\n    language: \"Langue\",\n    currency: \"Devise\",\n    profile: \"Profil\",\n    preferences: \"Préférences\",\n\n    personalInfo: \"Informations personnelles\",\n    updateProfile: \"Mettre à jour le profil\",\n    profileFirstName: \"Prénom\",\n    profileLastName: \"Nom\",\n    profilePhone: \"Téléphone\",\n    profileCompany: \"Entreprise\",\n    profilePosition: \"Poste\",\n    profileAddress: \"Adresse\",\n    profileBusinessType: \"Type d'activité\",\n    \n    // Messages\n    success: \"Succès\",\n    error: \"Erreur\",\n    confirmDelete: \"Êtes-vous sûr de vouloir supprimer cet élément ?\",\n    noData: \"Aucune donnée disponible\",\n    \n    // Landing page\n    appTitle: \"YGestion\",\n    appDescription: \"Application complète de gestion commerciale pour optimiser vos ventes, gérer vos clients et suivre votre activité en temps réel.\",\n    loginButton: \"Se connecter\",\n    createAccountButton: \"Créer un compte\",\n    newUserText: \"Nouveau sur YGestion ? Créez votre compte et complétez votre profil pour commencer.\",\n    clientManagement: \"Gestion des Clients\",\n    clientManagementDesc: \"Centralisez toutes les informations de vos clients et leur historique d'achat.\",\n    productCatalog: \"Catalogue Produits\",\n    productCatalogDesc: \"Organisez vos produits par catégories et suivez vos stocks en temps réel.\",\n    invoicing: \"Facturation\",\n    invoicingDesc: \"Créez et gérez vos factures facilement avec génération PDF automatique.\",\n    reporting: \"Reporting\",\n    reportingDesc: \"Analysez vos performances avec des rapports détaillés et des exports CSV.\",\n    whyChoose: \"Pourquoi choisir YGestion ?\",\n    modernInterface: \"Interface Moderne\",\n    modernInterfaceDesc: \"Interface intuitive et responsive, accessible depuis n'importe quel appareil.\",\n    secure: \"Sécurisé\",\n    secureDesc: \"Authentification sécurisée et données protégées avec chiffrement.\",\n    dashboardTitle: \"Tableau de Bord\",\n    dashboardDesc: \"Visualisez vos KPIs et suivez l'évolution de votre activité en temps réel.\",\n    readyToOptimize: \"Prêt à optimiser votre gestion commerciale ?\",\n    joinCompanies: \"Rejoignez les entreprises qui font confiance à YGestion pour leur croissance.\",\n    startNow: \"Démarrer maintenant\",\n  },\n  \n  en: {\n    // Navigation\n    dashboard: \"Dashboard\",\n    clients: \"Clients\",\n    products: \"Products\",\n    categories: \"Categories\",\n    invoices: \"Invoices\",\n    sales: \"Sales\",\n    settings: \"Settings\",\n    export: \"Export\",\n    logout: \"Logout\",\n\n    // Actions communes\n    create: \"Create\",\n    edit: \"Edit\",\n    delete: \"Delete\",\n    save: \"Save\",\n    cancel: \"Cancel\",\n    search: \"Search\",\n    loading: \"Loading...\",\n    \n    // Dashboard\n    revenue: \"Revenue\",\n    invoiceCount: \"Invoices\",\n    clientCount: \"Clients\",\n    productCount: \"Products\",\n    recentInvoices: \"Recent Invoices\",\n    topProducts: \"Top Products\",\n    \n    // Clients\n    clientName: \"Client Name\",\n    email: \"Email\",\n    phone: \"Phone\",\n    address: \"Address\",\n    company: \"Company\",\n    newClient: \"New Client\",\n    editClient: \"Edit Client\",\n    \n    // Products\n    productName: \"Product Name\",\n    description: \"Description\",\n    price: \"Price\",\n    stock: \"Stock\",\n    category: \"Category\",\n    taxRate: \"Tax Rate\",\n    newProduct: \"New Product\",\n    editProduct: \"Edit Product\",\n    \n    // Invoices\n    invoiceNumber: \"Invoice Number\",\n    client: \"Client\",\n    status: \"Status\",\n    total: \"Total\",\n    dueDate: \"Due Date\",\n    pending: \"Pending\",\n    paid: \"Paid\",\n    overdue: \"Overdue\",\n    newInvoice: \"New Invoice\",\n    \n    // Settings\n    language: \"Language\",\n    currency: \"Currency\",\n    profile: \"Profile\",\n    preferences: \"Preferences\",\n\n    personalInfo: \"Personal Information\",\n    updateProfile: \"Update Profile\",\n    profileFirstName: \"First Name\",\n    profileLastName: \"Last Name\",\n    profilePhone: \"Phone\",\n    profileCompany: \"Company\",\n    profilePosition: \"Position\",\n    profileAddress: \"Address\",\n    profileBusinessType: \"Business Type\",\n    \n    // Messages\n    success: \"Success\",\n    error: \"Error\",\n    confirmDelete: \"Are you sure you want to delete this item?\",\n    noData: \"No data available\",\n    \n    // Landing page\n    appTitle: \"YGestion\",\n    appDescription: \"Complete business management application to optimize your sales, manage your clients and track your activity in real time.\",\n    loginButton: \"Sign In\",\n    createAccountButton: \"Create Account\",\n    newUserText: \"New to YGestion? Create your account and complete your profile to get started.\",\n    clientManagement: \"Client Management\",\n    clientManagementDesc: \"Centralize all your client information and their purchase history.\",\n    productCatalog: \"Product Catalog\",\n    productCatalogDesc: \"Organize your products by categories and track your inventory in real time.\",\n    invoicing: \"Invoicing\",\n    invoicingDesc: \"Create and manage your invoices easily with automatic PDF generation.\",\n    reporting: \"Reporting\",\n    reportingDesc: \"Analyze your performance with detailed reports and CSV exports.\",\n    whyChoose: \"Why choose YGestion?\",\n    modernInterface: \"Modern Interface\",\n    modernInterfaceDesc: \"Intuitive and responsive interface, accessible from any device.\",\n    secure: \"Secure\",\n    secureDesc: \"Secure authentication and protected data with encryption.\",\n    dashboardTitle: \"Dashboard\",\n    dashboardDesc: \"Visualize your KPIs and track your business activity evolution in real time.\",\n    readyToOptimize: \"Ready to optimize your business management?\",\n    joinCompanies: \"Join the companies that trust YGestion for their growth.\",\n    startNow: \"Start Now\",\n  }\n};\n\nexport const taxRates = [\n  { value: \"3.00\", label: \"3%\" },\n  { value: \"5.00\", label: \"5%\" },\n  { value: \"10.00\", label: \"10%\" },\n  { value: \"15.00\", label: \"15%\" },\n  { value: \"18.00\", label: \"18%\" },\n  { value: \"21.00\", label: \"21%\" },\n];\n\nexport const currencies = [\n  { value: \"XOF\", label: \"XOF - Franc CFA\", symbol: \"XOF\" },\n  { value: \"GHS\", label: \"GHS - Cedi ghanéen\", symbol: \"GH₵\" },\n];\n\nexport const languages = [\n  { value: \"fr\", label: \"Français\" },\n  { value: \"en\", label: \"English\" },\n];\n\n// Hook pour utiliser les traductions avec support des paramètres utilisateur\nexport function useTranslation(language?: Language) {\n  // Si aucune langue n'est fournie, essayer de récupérer depuis le localStorage\n  const currentLanguage = language || \n    (typeof window !== 'undefined' ? localStorage.getItem('preferredLanguage') as Language : null) || \n    'fr';\n    \n  return {\n    t: (key: keyof Translations) => translations[currentLanguage][key] || translations['fr'][key] || key,\n    language: currentLanguage,\n  };\n}\n\n// Fonction pour formater les prix selon la devise\nexport function formatPrice(amount: number | string, currency: string = 'XOF'): string {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n  \n  switch (currency) {\n    case 'XOF':\n      return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n    case 'GHS':\n      return `GH₵ ${numAmount.toLocaleString('en-US', { minimumFractionDigits: 2 })}`;\n    default:\n      // Fallback pour XOF par défaut\n      return `${numAmount.toLocaleString('fr-FR')} F CFA`;\n  }\n}","size_bytes":10879},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Users, \n  Mail, \n  Lock, \n  User,\n  LogIn,\n  UserPlus\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\n\n// Schémas de validation\nconst loginSchema = z.object({\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n});\n\nconst registerSchema = z.object({\n  firstName: z.string().min(2, \"Le prénom doit contenir au moins 2 caractères\"),\n  lastName: z.string().min(2, \"Le nom doit contenir au moins 2 caractères\"),\n  email: z.string().email(\"Email invalide\"),\n  password: z.string().min(6, \"Le mot de passe doit contenir au moins 6 caractères\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Les mots de passe ne correspondent pas\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\ntype RegisterData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { toast } = useToast();\n  const { user, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"login\");\n\n  // Rediriger si déjà connecté\n  useEffect(() => {\n    if (!authLoading && user) {\n      setLocation(\"/\");\n    }\n  }, [user, authLoading, setLocation]);\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur de connexion\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (user) => {\n      toast({\n        title: \"Connexion réussie !\",\n        description: `Bienvenue ${user.firstName} !`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur de connexion\",\n        description: error.message || \"Email ou mot de passe incorrect\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterData) => {\n      const { confirmPassword, ...registerData } = data;\n      const response = await fetch(\"/api/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(registerData),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de l'inscription\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (user) => {\n      toast({\n        title: \"Compte créé avec succès !\",\n        description: `Bienvenue ${user.firstName} ! Vous pouvez maintenant compléter votre profil.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      setLocation(\"/complete-profile\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur lors de l'inscription\",\n        description: error.message || \"Une erreur s'est produite\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onLogin = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterData) => {\n    registerMutation.mutate(data);\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-pulse\">\n          <div className=\"w-96 h-96 bg-white rounded-xl shadow-sm\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Users className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            YGestion\n          </h1>\n          <p className=\"text-gray-600\">\n            Connectez-vous à votre espace de gestion commerciale\n          </p>\n        </div>\n\n        {/* Auth Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">\n              {activeTab === \"login\" ? \"Connexion\" : \"Créer un compte\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">\n                  <LogIn className=\"w-4 h-4 mr-2\" />\n                  Connexion\n                </TabsTrigger>\n                <TabsTrigger value=\"register\">\n                  <UserPlus className=\"w-4 h-4 mr-2\" />\n                  Inscription\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Login Tab */}\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"kouame@exemple.ci\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mot de passe</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"••••••••\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                    >\n                      {loginMutation.isPending ? \"Connexion...\" : \"Se connecter\"}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n\n              {/* Register Tab */}\n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Prénom</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Kouamé\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nom</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Yao\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"email\"\n                              placeholder=\"kouame@exemple.ci\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Mot de passe</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"••••••••\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"confirmPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Confirmer le mot de passe</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"password\"\n                              placeholder=\"••••••••\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                    >\n                      {registerMutation.isPending ? \"Création...\" : \"Créer mon compte\"}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-8 text-sm text-gray-500\">\n          <p>\n            En vous connectant, vous acceptez nos conditions d'utilisation\n            et notre politique de confidentialité.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12557},"client/src/pages/categories.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { \n  Tags, \n  Edit, \n  Trash2, \n  Plus,\n  Search\n} from \"lucide-react\";\nimport { insertCategorySchema, type Category, type InsertCategory } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nexport default function Categories() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const form = useForm<InsertCategory>({\n    resolver: zodResolver(insertCategorySchema.omit({ userId: true })),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      await apiRequest(\"POST\", \"/api/categories\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Catégorie créée\",\n        description: \"La catégorie a été créée avec succès.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer la catégorie.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertCategory) => {\n      if (!editingCategory) throw new Error(\"No category to update\");\n      await apiRequest(\"PUT\", `/api/categories/${editingCategory.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Catégorie modifiée\",\n        description: \"La catégorie a été modifiée avec succès.\",\n      });\n      setIsDialogOpen(false);\n      setEditingCategory(null);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier la catégorie.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/categories/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Catégorie supprimée\",\n        description: \"La catégorie a été supprimée avec succès.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la catégorie.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenDialog = (category?: Category) => {\n    if (category) {\n      setEditingCategory(category);\n      form.reset({\n        name: category.name,\n        description: category.description || \"\",\n      });\n    } else {\n      setEditingCategory(null);\n      form.reset();\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertCategory) => {\n    if (editingCategory) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const filteredCategories = categories.filter((category: Category) =>\n    category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    category.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading || categoriesLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Catégories\" \n          subtitle=\"Organisez vos produits par catégories\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-24\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Catégories\" \n        subtitle=\"Organisez vos produits par catégories\"\n        action={{\n          label: \"Nouvelle Catégorie\",\n          onClick: () => handleOpenDialog()\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Rechercher une catégorie...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Categories Grid */}\n        {filteredCategories.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Tags className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? \"Aucune catégorie trouvée\" : \"Aucune catégorie\"}\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                {searchTerm \n                  ? \"Essayez de modifier votre recherche.\"\n                  : \"Commencez par créer votre première catégorie.\"\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => handleOpenDialog()}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Nouvelle Catégorie\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredCategories.map((category: Category) => (\n              <Card key={category.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleOpenDialog(category)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteMutation.mutate(category.id)}\n                        disabled={deleteMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {category.description && (\n                    <p className=\"text-sm text-gray-600 line-clamp-3\">\n                      {category.description}\n                    </p>\n                  )}\n                  <div className=\"pt-2 text-xs text-gray-500\">\n                    Créée le {category.createdAt && new Date(category.createdAt).toLocaleDateString('fr-FR')}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Create/Edit Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingCategory ? \"Modifier la Catégorie\" : \"Nouvelle Catégorie\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom de la catégorie *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Électronique\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Description de la catégorie\"\n                          rows={4}\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingCategory ? \"Modifier\" : \"Créer\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12071},"client/src/pages/clients.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  Mail, \n  Phone, \n  Building, \n  MapPin, \n  Edit, \n  Trash2, \n  Plus,\n  Search\n} from \"lucide-react\";\nimport { insertClientSchema, type Client, type InsertClient } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nexport default function Clients() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingClient, setEditingClient] = useState<Client | null>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: clients = [], isLoading: clientsLoading } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 30000,\n  });\n\n  const form = useForm<InsertClient>({\n    resolver: zodResolver(insertClientSchema.omit({ userId: true })),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      company: \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      await apiRequest(\"POST\", \"/api/clients\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: \"Client créé\",\n        description: \"Le client a été créé avec succès.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer le client.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertClient) => {\n      if (!editingClient) throw new Error(\"No client to update\");\n      await apiRequest(\"PUT\", `/api/clients/${editingClient.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: \"Client modifié\",\n        description: \"Le client a été modifié avec succès.\",\n      });\n      setIsDialogOpen(false);\n      setEditingClient(null);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le client.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/clients/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clients\"] });\n      toast({\n        title: \"Client supprimé\",\n        description: \"Le client a été supprimé avec succès.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le client.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenDialog = (client?: Client) => {\n    if (client) {\n      setEditingClient(client);\n      form.reset({\n        name: client.name,\n        email: client.email || \"\",\n        phone: client.phone || \"\",\n        address: client.address || \"\",\n        company: client.company || \"\",\n      });\n    } else {\n      setEditingClient(null);\n      form.reset();\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertClient) => {\n    if (editingClient) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const filteredClients = clients.filter((client) =>\n    client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.company?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  if (isLoading || clientsLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Clients\" \n          subtitle=\"Gérez vos clients et leurs informations\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-24\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Clients\" \n        subtitle=\"Gérez vos clients et leurs informations\"\n        action={{\n          label: \"Nouveau Client\",\n          onClick: () => handleOpenDialog()\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Rechercher un client...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Clients Grid */}\n        {filteredClients.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? \"Aucun client trouvé\" : \"Aucun client\"}\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                {searchTerm \n                  ? \"Essayez de modifier votre recherche.\"\n                  : \"Commencez par ajouter votre premier client.\"\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => handleOpenDialog()}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Nouveau Client\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredClients.map((client: Client) => (\n              <Card key={client.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{client.name}</CardTitle>\n                      {client.company && (\n                        <Badge variant=\"secondary\" className=\"mt-1\">\n                          {client.company}\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleOpenDialog(client)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => deleteMutation.mutate(client.id)}\n                        disabled={deleteMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {client.email && (\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                      <Mail className=\"w-4 h-4\" />\n                      <span>{client.email}</span>\n                    </div>\n                  )}\n                  {client.phone && (\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                      <Phone className=\"w-4 h-4\" />\n                      <span>{client.phone}</span>\n                    </div>\n                  )}\n                  {client.address && (\n                    <div className=\"flex items-start space-x-2 text-sm text-gray-600\">\n                      <MapPin className=\"w-4 h-4 mt-0.5\" />\n                      <span className=\"line-clamp-2\">{client.address}</span>\n                    </div>\n                  )}\n                  <div className=\"pt-2 text-xs text-gray-500\">\n                    Créé le {client.createdAt && new Date(client.createdAt).toLocaleDateString('fr-FR')}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Create/Edit Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingClient ? \"Modifier le Client\" : \"Nouveau Client\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom complet *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Kouamé Yao\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"company\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Entreprise</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"SARL AKWABA\" {...field} value={field.value || \"\"} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"kouame@exemple.ci\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Téléphone</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"07 12 34 56 78\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Adresse</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Cocody Riviera 3, Abidjan\"\n                          rows={3}\n                          {...field} \n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingClient ? \"Modifier\" : \"Créer\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14918},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport Header from \"@/components/header\";\nimport StatsCard from \"@/components/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  TrendingUp,\n  FileText, \n  Users, \n  Package, \n  Eye, \n  Download, \n  Edit,\n  UserPlus,\n  Plus,\n  BarChart3,\n  FolderOutput,\n  AlertTriangle,\n  CircleAlert,\n  RefreshCw\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport SyncStatus from \"@/components/sync-status\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n  const { settings } = useSettings();\n  const { t } = useTranslation(settings?.language);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats = {}, isLoading: statsLoading, isFetching: statsFetching } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n    refetchInterval: 30000, // Rafraîchit toutes les 30 secondes\n    refetchIntervalInBackground: true, // Continue même quand l'onglet n'est pas visible\n    staleTime: 0, // Les données sont considérées comme obsolètes immédiatement\n  });\n\n  const { data: userSettings } = useQuery({\n    queryKey: [\"/api/user/settings\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes pour les paramètres\n    staleTime: 30000, // Les paramètres restent valides 30 secondes\n  });\n\n  if (isLoading || statsLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Tableau de Bord\" \n          subtitle=\"Vue d'ensemble de votre activité commerciale\"\n          action={{\n            label: \"Nouvelle Facture\",\n            onClick: () => {}\n          }}\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-32\" />\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Tableau de Bord\" \n          subtitle=\"Vue d'ensemble de votre activité commerciale\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">Impossible de charger les statistiques</p>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: number) => {\n    const currency = (userSettings as any)?.currency || 'XOF';\n    \n    if (currency === 'XOF') {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(amount) + ' F CFA';\n    } else if (currency === 'GHS') {\n      return 'GH₵ ' + new Intl.NumberFormat('en-US', {\n        style: 'decimal',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(amount);\n    } else {\n      // Fallback pour XOF par défaut\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(amount) + ' F CFA';\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">{t('paid')}</Badge>;\n      case 'pending':\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">{t('pending')}</Badge>;\n      case 'overdue':\n        return <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800\">{t('overdue')}</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title={t('dashboard')}\n        subtitle={settings?.language === 'en' ? \"Overview of your business activity\" : \"Vue d'ensemble de votre activité commerciale\"}\n        action={{\n          label: t('newInvoice'),\n          onClick: () => setLocation(\"/invoices\")\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <StatsCard\n            title={t('revenue')}\n            value={formatCurrency((stats as any)?.revenue || 0)}\n            change={\n              (stats as any)?.revenueGrowth !== undefined && (stats as any)?.revenueGrowth !== 0\n                ? `${(stats as any).revenueGrowth >= 0 ? '+' : ''}${(stats as any).revenueGrowth}% ${settings?.language === 'en' ? 'vs last month' : 'vs mois dernier'}`\n                : settings?.language === 'en' ? \"No previous data\" : \"Aucune donnée précédente\"\n            }\n            changeType={(stats as any)?.revenueGrowth >= 0 ? \"positive\" : \"negative\"}\n            icon={TrendingUp}\n            iconColor=\"bg-green-50 text-green-500\"\n          />\n          <StatsCard\n            title={t('invoiceCount')}\n            value={(stats as any)?.invoiceCount || 0}\n            change={\n              (stats as any)?.recentInvoiceCount !== undefined\n                ? `+${(stats as any).recentInvoiceCount} ${settings?.language === 'en' ? 'this week' : 'cette semaine'}`\n                : settings?.language === 'en' ? \"No recent invoices\" : \"Aucune facture récente\"\n            }\n            changeType=\"positive\"\n            icon={FileText}\n            iconColor=\"bg-blue-50 text-blue-500\"\n          />\n          <StatsCard\n            title={settings?.language === 'en' ? \"Active Clients\" : \"Clients Actifs\"}\n            value={(stats as any)?.clientCount || 0}\n            change={\n              (stats as any)?.recentClientCount !== undefined\n                ? `+${(stats as any).recentClientCount} ${settings?.language === 'en' ? 'new this month' : 'nouveaux ce mois'}`\n                : settings?.language === 'en' ? \"No new clients\" : \"Aucun nouveau client\"\n            }\n            changeType=\"positive\"\n            icon={Users}\n            iconColor=\"bg-purple-50 text-purple-500\"\n          />\n          <StatsCard\n            title={t('productCount')}\n            value={(stats as any)?.productCount || 0}\n            change={settings?.language === 'en' ? \n              `${((stats as any)?.lowStockProducts || []).length} stock alerts` : \n              `${((stats as any)?.lowStockProducts || []).length} ruptures de stock`}\n            changeType={((stats as any)?.lowStockProducts || []).length > 0 ? \"negative\" : \"neutral\"}\n            icon={Package}\n            iconColor=\"bg-orange-50 text-orange-500\"\n          />\n        </div>\n\n        {/* Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Recent Invoices */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>{t('recentInvoices')}</CardTitle>\n                  <Link href=\"/invoices\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      {settings?.language === 'en' ? \"View All\" : \"Voir toutes\"}\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('invoiceNumber')}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('client')}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {settings?.language === 'en' ? \"Amount\" : \"Montant\"}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {t('status')}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {settings?.language === 'en' ? \"Date\" : \"Date\"}\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          {settings?.language === 'en' ? \"Actions\" : \"Actions\"}\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {((stats as any)?.recentInvoices || []).length === 0 ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\n                            {t('noData')}\n                          </td>\n                        </tr>\n                      ) : (\n                        ((stats as any)?.recentInvoices || []).map((invoice: any) => (\n                          <tr key={invoice.id} className=\"hover:bg-gray-50\">\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                              {invoice.number}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                              {invoice.client?.name || (settings?.language === 'en' ? 'Unknown client' : 'Client inconnu')}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                              {formatCurrency(parseFloat(invoice.totalTTC || invoice.total || \"0\"))}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              {getStatusBadge(invoice.status)}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              {invoice.createdAt && formatDate(invoice.createdAt)}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                              <Link href={`/invoices/${invoice.id}`}>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </Link>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Download className=\"w-4 h-4\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Actions Rapides</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Link href=\"/clients\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start bg-primary-50 hover:bg-primary-100\">\n                    <UserPlus className=\"mr-3 w-4 h-4 text-primary\" />\n                    Nouveau Client\n                  </Button>\n                </Link>\n                <Link href=\"/products\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start bg-green-50 hover:bg-green-100\">\n                    <Plus className=\"mr-3 w-4 h-4 text-green-500\" />\n                    Nouveau Produit\n                  </Button>\n                </Link>\n                <Link href=\"/sales\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start bg-blue-50 hover:bg-blue-100\">\n                    <BarChart3 className=\"mr-3 w-4 h-4 text-blue-500\" />\n                    Générer Rapport\n                  </Button>\n                </Link>\n                <Link href=\"/export\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start bg-purple-50 hover:bg-purple-100\">\n                    <FolderOutput className=\"mr-3 w-4 h-4 text-purple-500\" />\n                    Exporter Données\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Top Products */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Produits les Plus Vendus</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {((stats as any)?.topProducts || []).length === 0 ? (\n                  <p className=\"text-center text-gray-500 py-4\">Aucune vente enregistrée</p>\n                ) : (\n                  ((stats as any)?.topProducts || []).map((product: any, index: number) => (\n                    <div key={product.id} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center\">\n                          <Package className=\"w-5 h-5 text-gray-500\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{product.name}</p>\n                          <p className=\"text-xs text-gray-500\">#{index + 1}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium text-gray-900\">{product.salesCount}</p>\n                        <p className=\"text-xs text-gray-500\">vendus</p>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Low Stock Alert */}\n            {((stats as any)?.lowStockProducts || []).length > 0 && (\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Alertes Stock</CardTitle>\n                    <Badge variant=\"destructive\">\n                      {((stats as any)?.lowStockProducts || []).length} alertes\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {((stats as any)?.lowStockProducts || []).slice(0, 3).map((product: any) => (\n                    <div key={product.id} className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{product.name}</p>\n                          <p className=\"text-xs text-gray-500\">Stock: {product.stock} unités</p>\n                        </div>\n                      </div>\n                      <Link href={`/products/${product.id}`}>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"text-red-600 hover:text-red-800\">\n                          Réapprovisionner\n                        </Button>\n                      </Link>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n      \n      {/* Sync Status Indicator */}\n      <SyncStatus \n        isOnline={true}\n        isSyncing={statsFetching}\n        lastSync={statsFetching ? undefined : new Date()}\n      />\n    </div>\n  );\n}\n","size_bytes":17448},"client/src/pages/export.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Download, \n  FileText, \n  Users, \n  Package, \n  Database,\n  Calendar,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\n\nexport default function Export() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [exportStatus, setExportStatus] = useState<{ [key: string]: 'idle' | 'loading' | 'success' | 'error' }>({});\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const handleExport = async (type: 'clients' | 'products' | 'invoices') => {\n    setExportStatus(prev => ({ ...prev, [type]: 'loading' }));\n    \n    try {\n      const response = await fetch(`/api/export/${type}`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      // Create blob and download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${type}_${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      setExportStatus(prev => ({ ...prev, [type]: 'success' }));\n      toast({\n        title: \"Export réussi\",\n        description: `Les données ${type} ont été exportées avec succès.`,\n      });\n      \n      // Reset status after 3 seconds\n      setTimeout(() => {\n        setExportStatus(prev => ({ ...prev, [type]: 'idle' }));\n      }, 3000);\n      \n    } catch (error) {\n      console.error(`Error exporting ${type}:`, error);\n      setExportStatus(prev => ({ ...prev, [type]: 'error' }));\n      toast({\n        title: \"Erreur d'export\",\n        description: `Impossible d'exporter les données ${type}.`,\n        variant: \"destructive\",\n      });\n      \n      // Reset status after 3 seconds\n      setTimeout(() => {\n        setExportStatus(prev => ({ ...prev, [type]: 'idle' }));\n      }, 3000);\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'loading':\n        return <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\" />;\n      case 'success':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'error':\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <Download className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getButtonText = (type: string, status: string) => {\n    switch (status) {\n      case 'loading':\n        return 'Export en cours...';\n      case 'success':\n        return 'Exporté avec succès';\n      case 'error':\n        return 'Erreur - Réessayer';\n      default:\n        return `Exporter ${type}`;\n    }\n  };\n\n  const isButtonDisabled = (status: string) => {\n    return status === 'loading' || status === 'success';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Export & Sauvegarde\" \n          subtitle=\"Exportez vos données en format CSV\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-32\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Export & Sauvegarde\" \n        subtitle=\"Exportez vos données en format CSV\"\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {/* Info Card */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start space-x-3\">\n                <Database className=\"w-6 h-6 text-blue-600 mt-1\" />\n                <div>\n                  <h3 className=\"font-semibold text-blue-900 mb-2\">À propos des exports</h3>\n                  <p className=\"text-blue-700 text-sm mb-3\">\n                    Exportez vos données au format CSV pour les sauvegarder ou les importer dans d'autres applications.\n                    Les fichiers incluent toutes les informations disponibles pour chaque type de données.\n                  </p>\n                  <ul className=\"text-blue-700 text-sm space-y-1\">\n                    <li>• Les exports incluent toutes vos données</li>\n                    <li>• Format CSV compatible avec Excel et autres tableurs</li>\n                    <li>• Encodage UTF-8 pour les caractères spéciaux</li>\n                    <li>• Données à jour au moment de l'export</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Export Options */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Clients Export */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">Clients</CardTitle>\n                    <p className=\"text-sm text-gray-500\">Export de la base clients</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Exporte tous vos clients avec leurs informations complètes : nom, email, téléphone, adresse, entreprise.\n                  </p>\n                  <Badge variant=\"outline\" className=\"mb-3\">\n                    <Calendar className=\"w-3 h-3 mr-1\" />\n                    Inclut les dates de création\n                  </Badge>\n                </div>\n                <Button \n                  className=\"w-full\"\n                  onClick={() => handleExport('clients')}\n                  disabled={isButtonDisabled(exportStatus.clients || 'idle')}\n                  variant={exportStatus.clients === 'error' ? 'destructive' : 'default'}\n                >\n                  {getStatusIcon(exportStatus.clients || 'idle')}\n                  <span className=\"ml-2\">\n                    {getButtonText('Clients', exportStatus.clients || 'idle')}\n                  </span>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Products Export */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                    <Package className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">Produits</CardTitle>\n                    <p className=\"text-sm text-gray-500\">Export du catalogue</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Exporte tous vos produits avec les détails : nom, description, prix, stock, catégorie.\n                  </p>\n                  <Badge variant=\"outline\" className=\"mb-3\">\n                    <Calendar className=\"w-3 h-3 mr-1\" />\n                    Inclut les niveaux de stock\n                  </Badge>\n                </div>\n                <Button \n                  className=\"w-full\"\n                  onClick={() => handleExport('products')}\n                  disabled={isButtonDisabled(exportStatus.products || 'idle')}\n                  variant={exportStatus.products === 'error' ? 'destructive' : 'default'}\n                >\n                  {getStatusIcon(exportStatus.products || 'idle')}\n                  <span className=\"ml-2\">\n                    {getButtonText('Produits', exportStatus.products || 'idle')}\n                  </span>\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Invoices Export */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-lg\">Factures</CardTitle>\n                    <p className=\"text-sm text-gray-500\">Export des factures</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-3\">\n                    Exporte toutes vos factures avec les montants, statuts, clients et dates d'échéance.\n                  </p>\n                  <Badge variant=\"outline\" className=\"mb-3\">\n                    <Calendar className=\"w-3 h-3 mr-1\" />\n                    Inclut les statuts de paiement\n                  </Badge>\n                </div>\n                <Button \n                  className=\"w-full\"\n                  onClick={() => handleExport('invoices')}\n                  disabled={isButtonDisabled(exportStatus.invoices || 'idle')}\n                  variant={exportStatus.invoices === 'error' ? 'destructive' : 'default'}\n                >\n                  {getStatusIcon(exportStatus.invoices || 'idle')}\n                  <span className=\"ml-2\">\n                    {getButtonText('Factures', exportStatus.invoices || 'idle')}\n                  </span>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Export History */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recommandations de sauvegarde</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Fréquence recommandée</h4>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>• <strong>Quotidienne :</strong> Pour les données critiques</li>\n                      <li>• <strong>Hebdomadaire :</strong> Export complet de sécurité</li>\n                      <li>• <strong>Mensuelle :</strong> Archive de fin de mois</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Bonnes pratiques</h4>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>• Stockez les exports en lieu sûr</li>\n                      <li>• Vérifiez l'intégrité des fichiers</li>\n                      <li>• Conservez plusieurs versions</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12213},"client/src/pages/invoice-detail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useParams, useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport InvoicePDF from \"@/components/invoice-pdf\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ArrowLeft, \n  Download, \n  Edit, \n  Trash2,\n  CheckCircle,\n  Clock,\n  AlertCircle,\n  Printer\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { type Invoice, type Client, type InvoiceItem, INVOICE_STATUS } from \"@shared/schema\";\n\nexport default function InvoiceDetail() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const invoiceId = params.id;\n  \n  // Check if print parameter is in URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const shouldPrint = urlParams.get('print') === 'true';\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n\n\n  const { data: invoice, isLoading: invoiceLoading } = useQuery<Invoice & { items: InvoiceItem[]; client: Client }>({\n    queryKey: [\"/api/invoices\", invoiceId, \"details\"],\n    retry: false,\n    enabled: !!invoiceId,\n  });\n\n  const { data: user } = useQuery({\n    queryKey: [\"/api/user\"],\n    retry: false,\n  });\n\n  const { data: userSettings } = useQuery({\n    queryKey: [\"/api/user/settings\"],\n    retry: false,\n  });\n\n  // Auto-print when invoice is loaded and print parameter is present\n  useEffect(() => {\n    if (shouldPrint && invoice && !invoiceLoading) {\n      // Clean URL by removing print parameter\n      const url = new URL(window.location.href);\n      url.searchParams.delete('print');\n      window.history.replaceState({}, '', url.toString());\n      \n      // Trigger print after a short delay to allow rendering\n      setTimeout(() => {\n        window.print();\n      }, 1000);\n    }\n  }, [shouldPrint, invoice, invoiceLoading]);\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      await apiRequest(\"PUT\", `/api/invoices/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\", invoiceId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Statut mis à jour\",\n        description: \"Le statut de la facture a été mis à jour.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre à jour le statut.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/invoices/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Facture supprimée\",\n        description: \"La facture a été supprimée avec succès.\",\n      });\n      setLocation(\"/invoices\");\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la facture.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const currency = (userSettings as any)?.currency || 'XOF';\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    if (currency === 'XOF') {\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(numAmount) + ' F CFA';\n    } else if (currency === 'GHS') {\n      return 'GH₵ ' + new Intl.NumberFormat('en-US', {\n        style: 'decimal',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n      }).format(numAmount);\n    } else {\n      // Fallback pour XOF par défaut\n      return new Intl.NumberFormat('fr-FR', {\n        style: 'decimal',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0,\n      }).format(numAmount) + ' F CFA';\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusInfo = INVOICE_STATUS.find(s => s.value === status);\n    if (statusInfo) {\n      return (\n        <Badge className={statusInfo.color}>\n          {statusInfo.icon} {statusInfo.label}\n        </Badge>\n      );\n    }\n    // Fallback for old statuses\n    switch (status) {\n      case 'paid':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"w-3 h-3 mr-1\" />Payée</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><Clock className=\"w-3 h-3 mr-1\" />En attente</Badge>;\n      case 'overdue':\n        return <Badge className=\"bg-red-100 text-red-800\"><AlertCircle className=\"w-3 h-3 mr-1\" />En retard</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      // Dynamically import jsPDF and html2canvas to avoid SSR issues\n      const { default: jsPDF } = await import('jspdf');\n      const { default: html2canvas } = await import('html2canvas');\n      \n      // Get the invoice content element\n      const element = document.querySelector('.invoice-content') as HTMLElement;\n      if (!element) {\n        console.error(\"Invoice content element not found\");\n        toast({\n          title: \"Erreur\",\n          description: \"Contenu de la facture non trouvé\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Hide action buttons temporarily for cleaner PDF\n      const actionButtons = document.querySelectorAll('.print\\\\:hidden');\n      const originalDisplays: string[] = [];\n      actionButtons.forEach((button, index) => {\n        const el = button as HTMLElement;\n        originalDisplays[index] = el.style.display;\n        el.style.display = 'none';\n      });\n      \n      // Wait a moment for styles to apply\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      // Generate canvas from HTML with better options\n      const canvas = await html2canvas(element, {\n        scale: 1.5,\n        useCORS: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        logging: false,\n        removeContainer: true,\n        imageTimeout: 15000,\n        onclone: (clonedDoc) => {\n          // Remove any remaining print-hidden elements in the clone\n          const printHiddenElements = clonedDoc.querySelectorAll('.print\\\\:hidden');\n          printHiddenElements.forEach(el => el.remove());\n        }\n      });\n      \n      // Restore action buttons\n      actionButtons.forEach((button, index) => {\n        const el = button as HTMLElement;\n        el.style.display = originalDisplays[index] || '';\n      });\n      \n      // Create PDF with proper dimensions\n      const pdf = new jsPDF({\n        orientation: 'portrait',\n        unit: 'mm',\n        format: 'a4',\n      });\n      \n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 10;\n      const contentWidth = pageWidth - (2 * margin);\n      \n      // Calculate dimensions\n      const imgWidth = contentWidth;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      \n      // Add the image to PDF\n      const imgData = canvas.toDataURL('image/png', 0.95);\n      \n      if (imgHeight <= pageHeight - (2 * margin)) {\n        // Single page\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      } else {\n        // Multiple pages - use a simpler approach\n        pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n      }\n      \n      // Generate filename with current date\n      const now = new Date();\n      const dateStr = now.toLocaleDateString('fr-FR').replace(/\\//g, '-');\n      const timeStr = now.toLocaleTimeString('fr-FR').replace(/:/g, '-');\n      const filename = `Facture_${invoice?.number || 'UNKNOWN'}_${dateStr}_${timeStr}.pdf`;\n      \n      // Save the PDF\n      pdf.save(filename);\n      \n      toast({\n        title: \"PDF téléchargé\",\n        description: `Facture ${invoice?.number || 'UNKNOWN'} téléchargée avec succès`,\n      });\n      \n    } catch (error) {\n      console.error('Erreur lors de la génération du PDF:', error);\n      toast({\n        title: \"Erreur\",\n        description: `Erreur lors de la génération du PDF: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePrint = () => {\n    // Store original styles\n    const originalTitle = document.title;\n    \n    // Change page title for print\n    document.title = `Facture ${invoice?.number || 'UNKNOWN'}`;\n    \n    // Open print dialog\n    window.print();\n    \n    // Restore original title after a short delay\n    setTimeout(() => {\n      document.title = originalTitle;\n    }, 100);\n  };\n\n  if (isLoading || invoiceLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Détail de la Facture\" \n          subtitle=\"Chargement...\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-96\" />\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (!invoice) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Facture non trouvée\" \n          subtitle=\"Cette facture n'existe pas ou vous n'avez pas l'autorisation de la voir\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500 mb-4\">Facture non trouvée</p>\n            <Link href=\"/invoices\">\n              <Button>\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Retour aux Factures\n              </Button>\n            </Link>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title={`Facture ${invoice.number}`}\n        subtitle={`Client: ${invoice.client?.name || 'Client inconnu'}`}\n        action={{\n          label: \"Retour\",\n          onClick: () => setLocation(\"/invoices\")\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Status and Actions Bar */}\n        <div className=\"mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div>\n              <p className=\"text-sm text-gray-500\">Statut</p>\n              {getStatusBadge(invoice.status)}\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Total TTC</p>\n              <p className=\"text-lg font-semibold\">{formatCurrency(invoice.totalTTC)}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Date d'échéance</p>\n              <p className=\"text-sm\">{invoice.dueDate ? formatDate(invoice.dueDate) : 'Non définie'}</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            {invoice.status !== 'payee' && (\n              <Button\n                onClick={() => updateStatusMutation.mutate({ id: invoice.id, status: 'payee' })}\n                disabled={updateStatusMutation.isPending}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                <CheckCircle className=\"mr-2 h-4 w-4\" />\n                Marquer comme Payée\n              </Button>\n            )}\n            \n            <Button variant=\"outline\" onClick={handlePrint}>\n              <Printer className=\"mr-2 h-4 w-4\" />\n              Imprimer\n            </Button>\n            \n            <Button variant=\"outline\" onClick={handleDownloadPDF}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Télécharger PDF\n            </Button>\n            \n            <Button variant=\"outline\">\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Modifier\n            </Button>\n            \n            <Button \n              variant=\"destructive\"\n              onClick={() => {\n                if (confirm('Êtes-vous sûr de vouloir supprimer cette facture ?')) {\n                  deleteMutation.mutate(invoice.id);\n                }\n              }}\n              disabled={deleteMutation.isPending}\n            >\n              <Trash2 className=\"mr-2 h-4 w-4\" />\n              Supprimer\n            </Button>\n          </div>\n        </div>\n\n        {/* Invoice PDF Preview */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Aperçu de la Facture</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <InvoicePDF invoice={invoice} user={user} />\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":13810},"client/src/pages/invoices.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  FileText, \n  Edit, \n  Trash2, \n  Plus,\n  Search,\n  Eye,\n  Download,\n  Minus,\n  Printer\n} from \"lucide-react\";\nimport { insertInvoiceSchema, insertInvoiceItemSchema, TAX_RATES, INVOICE_STATUS, type Invoice, type InsertInvoice, type Client, type Product, type User } from \"@shared/schema\";\nimport { SimpleProductSelect } from \"@/components/simple-product-select\";\nimport { SimpleClientSelect } from \"@/components/simple-client-select\";\nimport { SimpleProductSelectV2 } from \"@/components/simple-product-select-v2\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport InvoicePDF from \"@/components/invoice-pdf\";\n\nconst createInvoiceFormSchema = z.object({\n  clientId: z.number().min(1, \"Veuillez sélectionner un client\"),\n  status: z.string().min(1, \"Veuillez sélectionner un statut\"),\n  tvaRate: z.string().min(1, \"Veuillez sélectionner un taux de TVA\"),\n  dueDate: z.string().optional(),\n  notes: z.string().optional(),\n  items: z.array(z.object({\n    productId: z.number().optional(),\n    productName: z.string().min(1, \"Nom du produit requis\"),\n    quantity: z.number().min(1, \"Quantité doit être supérieure à 0\"),\n    priceHT: z.string().min(1, \"Prix HT requis\"),\n  })).min(1, \"Au moins un article est requis\"),\n});\n\ntype CreateInvoiceForm = z.infer<typeof createInvoiceFormSchema>;\n\nexport default function Invoices() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [viewingInvoice, setViewingInvoice] = useState<any>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: invoices = [], isLoading: invoicesLoading } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n    retry: false,\n    refetchInterval: 45000, // Rafraîchit toutes les 45 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 0,\n  });\n\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: [\"/api/clients\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes\n    staleTime: 30000,\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes\n    staleTime: 30000,\n  });\n\n  // Get user data for invoice header\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n    refetchInterval: 120000, // Rafraîchit toutes les 2 minutes\n    staleTime: 60000,\n  });\n\n  const form = useForm<CreateInvoiceForm>({\n    resolver: zodResolver(createInvoiceFormSchema),\n    defaultValues: {\n      clientId: undefined as any,\n      status: \"en_attente\",\n      tvaRate: \"18.00\",\n      dueDate: \"\",\n      notes: \"\",\n      items: [{ productId: undefined, productName: \"\", quantity: 1, priceHT: \"\" }],\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"items\",\n  });\n\n  const generateInvoiceNumber = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const invoiceCount = invoices.length + 1;\n    return `FAC-${year}-${invoiceCount.toString().padStart(3, '0')}`;\n  };\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CreateInvoiceForm) => {\n      // Calculate totals with new tax logic\n      const totalHT = data.items.reduce((sum, item) => \n        sum + (item.quantity * parseFloat(item.priceHT)), 0\n      );\n      const tvaRateNum = parseFloat(data.tvaRate);\n      const totalTVA = totalHT * (tvaRateNum / 100);\n      const totalTTC = totalHT + totalTVA;\n\n      const invoiceData: InsertInvoice = {\n        number: generateInvoiceNumber(),\n        clientId: data.clientId,\n        status: data.status,\n        totalHT: totalHT.toFixed(2),\n        tvaRate: data.tvaRate,\n        totalTVA: totalTVA.toFixed(2),\n        totalTTC: totalTTC.toFixed(2),\n        dueDate: data.dueDate ? new Date(data.dueDate) : null,\n        notes: data.notes,\n        userId: \"\", // Will be set by backend\n      };\n\n      const items = data.items.map(item => ({\n        productId: item.productId || null,\n        productName: item.productName,\n        quantity: item.quantity,\n        priceHT: item.priceHT,\n        totalHT: (item.quantity * parseFloat(item.priceHT)).toFixed(2),\n      }));\n\n      await apiRequest(\"POST\", \"/api/invoices\", { invoice: invoiceData, items });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Facture créée\",\n        description: \"La facture a été créée avec succès.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      console.error(\"Invoice creation error:\", error);\n      toast({\n        title: \"Erreur\",\n        description: (error as any)?.message || \"Impossible de créer la facture.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      await apiRequest(\"PUT\", `/api/invoices/${id}`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sales\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Statut mis à jour\",\n        description: \"Le statut de la facture a été mis à jour.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre à jour le statut.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/invoices/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Facture supprimée\",\n        description: \"La facture a été supprimée avec succès.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la facture.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateInvoiceForm) => {\n    createMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusInfo = INVOICE_STATUS.find(s => s.value === status);\n    if (statusInfo) {\n      return (\n        <Badge className={statusInfo.color}>\n          {statusInfo.icon} {statusInfo.label}\n        </Badge>\n      );\n    }\n    // Fallback for old statuses\n    switch (status) {\n      case 'paid':\n        return <Badge className=\"bg-green-100 text-green-800\">✅ Payée</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">⏳ En attente</Badge>;\n      case 'overdue':\n        return <Badge className=\"bg-red-100 text-red-800\">⚠️ En retard</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('fr-FR', {\n      style: 'decimal',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(numAmount) + ' F CFA';\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  const getClientName = (clientId: number) => {\n    const client = clients.find((c: Client) => c.id === clientId);\n    return client?.name || 'Client inconnu';\n  };\n\n  const getProductPrice = (productId: number) => {\n    const product = products.find((p: Product) => p.id === productId);\n    return product?.priceHT || \"0\";\n  };\n\n  const getProductName = (productId: number) => {\n    const product = products.find((p: Product) => p.id === productId);\n    return product?.name || \"\";\n  };\n\n  const filteredInvoices = invoices.filter((invoice: Invoice) => {\n    const matchesSearch = invoice.number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      getClientName(invoice.clientId).toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || invoice.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const watchedItems = form.watch(\"items\");\n  \n  // Tax rates for the selector\n  const TAX_RATES = [\n    { value: \"3.00\", label: \"3%\" },\n    { value: \"5.00\", label: \"5%\" },\n    { value: \"10.00\", label: \"10%\" },\n    { value: \"15.00\", label: \"15%\" },\n    { value: \"18.00\", label: \"18%\" },\n    { value: \"21.00\", label: \"21%\" },\n  ];\n  const watchedTvaRate = form.watch(\"tvaRate\");\n  const subtotal = watchedItems.reduce((sum, item) => \n    sum + (item.quantity * parseFloat(item.priceHT || \"0\")), 0\n  );\n  const tvaRateNum = parseFloat(watchedTvaRate || \"18.00\");\n  const tax = subtotal * (tvaRateNum / 100);\n  const total = subtotal + tax;\n\n  if (isLoading || invoicesLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header title=\"Factures\" subtitle=\"Gérez vos factures et paiements\" />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-24\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Factures\" \n        subtitle=\"Gérez vos factures et paiements\"\n        action={{\n          label: \"Nouvelle Facture\",\n          onClick: () => setIsDialogOpen(true)\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Filters */}\n        <div className=\"mb-6 flex gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Rechercher une facture...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tous les statuts</SelectItem>\n              <SelectItem value=\"pending\">En attente</SelectItem>\n              <SelectItem value=\"paid\">Payée</SelectItem>\n              <SelectItem value=\"overdue\">En retard</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Invoices Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Liste des Factures</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredInvoices.length === 0 ? (\n              <div className=\"py-12 text-center\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  {searchTerm || statusFilter !== \"all\" ? \"Aucune facture trouvée\" : \"Aucune facture\"}\n                </h3>\n                <p className=\"text-gray-500 mb-4\">\n                  {searchTerm || statusFilter !== \"all\"\n                    ? \"Essayez de modifier vos filtres.\"\n                    : \"Commencez par créer votre première facture.\"\n                  }\n                </p>\n                {!searchTerm && statusFilter === \"all\" && (\n                  <Button onClick={() => setIsDialogOpen(true)}>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Nouvelle Facture\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        N° Facture\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Client\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Montant\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Statut\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Date\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Échéance\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {filteredInvoices.map((invoice: Invoice) => (\n                      <tr key={invoice.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          {invoice.number}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {getClientName(invoice.clientId)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatCurrency(invoice.totalTTC)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <Select\n                            value={invoice.status}\n                            onValueChange={(status) => updateStatusMutation.mutate({ id: invoice.id, status })}\n                          >\n                            <SelectTrigger className=\"w-44\">\n                              {getStatusBadge(invoice.status)}\n                            </SelectTrigger>\n                            <SelectContent>\n                              {INVOICE_STATUS.map((status) => (\n                                <SelectItem key={status.value} value={status.value}>\n                                  {status.icon} {status.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {invoice.createdAt && formatDate(invoice.createdAt)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {invoice.dueDate ? formatDate(invoice.dueDate) : \"-\"}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // Fetch full invoice with items\n                              fetch(`/api/invoices/${invoice.id}`, {\n                                credentials: 'include'\n                              })\n                              .then(res => res.json())\n                              .then(data => setViewingInvoice(data))\n                              .catch(() => toast({\n                                title: \"Erreur\",\n                                description: \"Impossible de charger la facture.\",\n                                variant: \"destructive\",\n                              }));\n                            }}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            onClick={async () => {\n                              try {\n                                // Fetch full invoice with items for PDF generation\n                                const response = await fetch(`/api/invoices/${invoice.id}`, {\n                                  credentials: 'include'\n                                });\n                                const fullInvoice = await response.json();\n                                \n                                // Generate PDF using the same logic as invoice-detail page\n                                const { default: jsPDF } = await import('jspdf');\n                                const { default: html2canvas } = await import('html2canvas');\n                                \n                                // Create a temporary hidden div with the invoice content\n                                const tempDiv = document.createElement('div');\n                                tempDiv.style.position = 'absolute';\n                                tempDiv.style.left = '-9999px';\n                                tempDiv.style.top = '0';\n                                tempDiv.style.width = '210mm';\n                                tempDiv.style.background = 'white';\n                                tempDiv.style.padding = '20px';\n                                \n                                // Add invoice HTML content to temp div\n                                tempDiv.innerHTML = `\n                                  <div style=\"font-family: Arial, sans-serif; color: black; line-height: 1.6;\">\n                                    <div style=\"display: flex; justify-content: space-between; margin-bottom: 40px;\">\n                                      <div style=\"display: flex; align-items: flex-start; gap: 16px;\">\n\n                                        <div>\n                                          <h1 style=\"font-size: 36px; font-weight: bold; margin: 0;\">FACTURE</h1>\n                                          <p style=\"font-size: 18px; color: #666; margin: 8px 0;\">${fullInvoice.number}</p>\n                                        </div>\n                                      </div>\n                                      <div style=\"text-align: right;\">\n                                        <div style=\"font-size: 24px; font-weight: bold; color: #3b82f6; margin-bottom: 8px;\">\n                                          ${user?.company || `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Mon Entreprise'}\n                                        </div>\n                                        <div style=\"font-size: 14px; color: #666;\">\n                                          ${user?.address ? `<p>${user.address}</p>` : ''}\n                                          ${user?.email ? `<p>Email: ${user.email}</p>` : ''}\n                                          ${user?.phone ? `<p>Tél: ${user.phone}</p>` : ''}\n                                          ${user?.businessType ? `<p>Activité: ${user.businessType}</p>` : ''}\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-bottom: 40px;\">\n                                      <div>\n                                        <h3 style=\"font-weight: bold; margin-bottom: 12px;\">Facturé à :</h3>\n                                        <div style=\"color: #333;\">\n                                          <p style=\"font-weight: 500; margin: 4px 0;\">${fullInvoice.client?.name || 'Client inconnu'}</p>\n                                          ${fullInvoice.client?.company ? `<p style=\"margin: 4px 0;\">${fullInvoice.client.company}</p>` : ''}\n                                          ${fullInvoice.client?.email ? `<p style=\"margin: 4px 0;\">${fullInvoice.client.email}</p>` : ''}\n                                          ${fullInvoice.client?.phone ? `<p style=\"margin: 4px 0;\">${fullInvoice.client.phone}</p>` : ''}\n                                          ${fullInvoice.client?.address ? `<p style=\"margin: 4px 0; white-space: pre-line;\">${fullInvoice.client.address}</p>` : ''}\n                                        </div>\n                                      </div>\n                                      \n                                      <div>\n                                        <h3 style=\"font-weight: bold; margin-bottom: 12px;\">Détails de la facture :</h3>\n                                        <div style=\"color: #333;\">\n                                          <div style=\"display: flex; justify-content: space-between; margin: 8px 0;\">\n                                            <span>Date d'émission :</span>\n                                            <span>${new Date(fullInvoice.issueDate).toLocaleDateString('fr-FR')}</span>\n                                          </div>\n                                          <div style=\"display: flex; justify-content: space-between; margin: 8px 0;\">\n                                            <span>Date d'échéance :</span>\n                                            <span>${fullInvoice.dueDate ? new Date(fullInvoice.dueDate).toLocaleDateString('fr-FR') : 'Non définie'}</span>\n                                          </div>\n                                          <div style=\"display: flex; justify-content: space-between; margin: 8px 0;\">\n                                            <span>Statut :</span>\n                                            <span style=\"color: #f59e0b; font-weight: 500;\">En attente</span>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    <h3 style=\"font-weight: bold; margin-bottom: 16px;\">Articles</h3>\n                                    <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 32px;\">\n                                      <thead>\n                                        <tr style=\"background-color: #f9fafb;\">\n                                          <th style=\"padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb;\">Description</th>\n                                          <th style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">Qté</th>\n                                          <th style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">Prix HT</th>\n                                          <th style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">Total HT</th>\n                                        </tr>\n                                      </thead>\n                                      <tbody>\n                                        ${fullInvoice.items?.map((item: any) => `\n                                          <tr>\n                                            <td style=\"padding: 12px; border-bottom: 1px solid #e5e7eb;\">${item.productName}</td>\n                                            <td style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">${item.quantity}</td>\n                                            <td style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">${formatCurrency(item.priceHT)}</td>\n                                            <td style=\"padding: 12px; text-align: right; border-bottom: 1px solid #e5e7eb;\">${formatCurrency(item.quantity * parseFloat(item.priceHT))}</td>\n                                          </tr>\n                                        `).join('') || ''}\n                                      </tbody>\n                                    </table>\n                                    \n                                    <div style=\"display: flex; justify-content: flex-end;\">\n                                      <div style=\"width: 300px;\">\n                                        <div style=\"display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb;\">\n                                          <span>Total HT:</span>\n                                          <span style=\"font-weight: 500;\">${formatCurrency(fullInvoice.totalHT)}</span>\n                                        </div>\n                                        <div style=\"display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid #e5e7eb;\">\n                                          <span>TVA (${fullInvoice.tvaRate}%):</span>\n                                          <span style=\"font-weight: 500;\">${formatCurrency(fullInvoice.totalTTC - fullInvoice.totalHT)}</span>\n                                        </div>\n                                        <div style=\"display: flex; justify-content: space-between; padding: 12px 0; border-top: 2px solid #374151; font-weight: bold; font-size: 18px;\">\n                                          <span>Total TTC:</span>\n                                          <span>${formatCurrency(fullInvoice.totalTTC)}</span>\n                                        </div>\n                                      </div>\n                                    </div>\n                                    \n                                    ${fullInvoice.notes ? `\n                                      <div style=\"margin-top: 32px;\">\n                                        <h3 style=\"font-weight: bold; margin-bottom: 8px;\">Notes</h3>\n                                        <p style=\"color: #666; white-space: pre-line;\">${fullInvoice.notes}</p>\n                                      </div>\n                                    ` : ''}\n                                    \n                                    <!-- Footer -->\n                                    <div style=\"margin-top: 32px; padding-top: 24px; border-top: 1px solid #e5e7eb; text-align: center; color: #666; font-size: 14px;\">\n                                      <p style=\"margin-bottom: 8px;\">Merci pour votre confiance !</p>\n                                      ${(user?.email || user?.phone) ? `\n                                        <p style=\"margin: 0;\">\n                                          Pour toute question concernant cette facture, contactez-nous :\n                                          ${user?.email ? `<br>Email : ${user.email}` : ''}\n                                          ${user?.phone ? `<br>Téléphone : ${user.phone}` : ''}\n                                        </p>\n                                      ` : ''}\n                                    </div>\n                                  </div>\n                                `;\n                                \n                                document.body.appendChild(tempDiv);\n                                \n                                // Generate canvas from the temp div\n                                const canvas = await html2canvas(tempDiv, {\n                                  scale: 1.5,\n                                  useCORS: true,\n                                  allowTaint: true,\n                                  backgroundColor: '#ffffff',\n                                  logging: false,\n                                  width: tempDiv.scrollWidth,\n                                  height: tempDiv.scrollHeight\n                                });\n                                \n                                // Remove temp div\n                                document.body.removeChild(tempDiv);\n                                \n                                // Create and save PDF\n                                const pdf = new jsPDF({\n                                  orientation: 'portrait',\n                                  unit: 'mm',\n                                  format: 'a4',\n                                });\n                                \n                                const pageWidth = pdf.internal.pageSize.getWidth();\n                                const pageHeight = pdf.internal.pageSize.getHeight();\n                                const margin = 10;\n                                const contentWidth = pageWidth - (2 * margin);\n                                \n                                const imgWidth = contentWidth;\n                                const imgHeight = (canvas.height * imgWidth) / canvas.width;\n                                \n                                const imgData = canvas.toDataURL('image/png', 0.95);\n                                pdf.addImage(imgData, 'PNG', margin, margin, imgWidth, imgHeight);\n                                \n                                const now = new Date();\n                                const dateStr = now.toLocaleDateString('fr-FR').replace(/\\//g, '-');\n                                const timeStr = now.toLocaleTimeString('fr-FR').replace(/:/g, '-');\n                                const filename = `Facture_${fullInvoice.number}_${dateStr}_${timeStr}.pdf`;\n                                \n                                pdf.save(filename);\n                                \n                                toast({\n                                  title: \"PDF téléchargé\",\n                                  description: `Facture ${fullInvoice.number} téléchargée avec succès`,\n                                });\n                                \n                              } catch (error) {\n                                console.error('Erreur lors de la génération du PDF:', error);\n                                toast({\n                                  title: \"Erreur\",\n                                  description: \"Impossible de générer le PDF\",\n                                  variant: \"destructive\",\n                                });\n                              }\n                            }}\n                          >\n                            <Download className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              // Navigate to invoice detail page and trigger print\n                              setLocation(`/invoices/${invoice.id}?print=true`);\n                            }}\n                          >\n                            <Printer className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => deleteMutation.mutate(invoice.id)}\n                            disabled={deleteMutation.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Invoice Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Nouvelle Facture</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"clientId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Client *</FormLabel>\n                        <FormControl>\n                          <SimpleClientSelect\n                            value={field.value}\n                            onChange={field.onChange}\n                            placeholder=\"Rechercher ou créer un client...\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Statut *</FormLabel>\n                        <Select \n                          onValueChange={field.onChange}\n                          value={field.value || \"en_attente\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Sélectionner statut\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {INVOICE_STATUS.map((status) => (\n                              <SelectItem key={status.value} value={status.value}>\n                                {status.icon} {status.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"tvaRate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Taux de TVA *</FormLabel>\n                        <Select \n                          onValueChange={field.onChange}\n                          value={field.value || \"18.00\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Sélectionner TVA\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {TAX_RATES.map((rate) => (\n                              <SelectItem key={rate.value} value={rate.value}>\n                                {rate.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dueDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date d'échéance</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Items */}\n                <div>\n                  <FormLabel className=\"text-base font-medium\">Produits/Services *</FormLabel>\n                  <div className=\"border border-gray-200 rounded-lg mt-2\">\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead className=\"bg-gray-50\">\n                          <tr>\n                            <th className=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">Produit</th>\n                            <th className=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">Quantité</th>\n                            <th className=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">Prix HT</th>\n                            <th className=\"px-4 py-2 text-left text-sm font-medium text-gray-700\">Total</th>\n                            <th className=\"px-4 py-2\"></th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {fields.map((field, index) => (\n                            <tr key={field.id}>\n                              <td className=\"px-4 py-2\">\n                                <div className=\"space-y-2\">\n                                  <SimpleProductSelectV2\n                                    value={form.watch(`items.${index}.productId`)}\n                                    onChange={(productId) => {\n                                      form.setValue(`items.${index}.productId`, productId);\n                                    }}\n                                    onProductSelect={(product) => {\n                                      form.setValue(`items.${index}.productName`, product.name);\n                                      form.setValue(`items.${index}.priceHT`, product.priceHT);\n                                      form.trigger([`items.${index}.productName`, `items.${index}.priceHT`]);\n                                    }}\n                                    placeholder=\"Rechercher un produit...\"\n                                  />\n                                  <FormField\n                                    control={form.control}\n                                    name={`items.${index}.productName`}\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormControl>\n                                          <Input placeholder=\"Nom du produit/service\" {...field} />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                </div>\n                              </td>\n                              <td className=\"px-4 py-2\">\n                                <FormField\n                                  control={form.control}\n                                  name={`items.${index}.quantity`}\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          min=\"1\"\n                                          {...field}\n                                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </td>\n                              <td className=\"px-4 py-2\">\n                                <FormField\n                                  control={form.control}\n                                  name={`items.${index}.priceHT`}\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          step=\"0.01\"\n                                          placeholder=\"0.00\"\n                                          {...field}\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </td>\n                              <td className=\"px-4 py-2 text-gray-900\">\n                                {formatCurrency(\n                                  watchedItems[index]?.quantity * parseFloat(watchedItems[index]?.priceHT || \"0\") || 0\n                                )}\n                              </td>\n                              <td className=\"px-4 py-2\">\n                                {fields.length > 1 && (\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => remove(index)}\n                                  >\n                                    <Minus className=\"w-4 h-4\" />\n                                  </Button>\n                                )}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                    <div className=\"p-4 border-t\">\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        onClick={() => append({ productId: undefined, productName: \"\", quantity: 1, priceHT: \"\" })}\n                      >\n                        <Plus className=\"mr-1 w-4 h-4\" />\n                        Ajouter une ligne\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Notes additionnelles\"\n                          rows={3}\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Totals */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Total HT:</span>\n                      <span className=\"text-sm font-medium\">{formatCurrency(subtotal)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">TVA ({tvaRateNum}%):</span>\n                      <span className=\"text-sm font-medium\">{formatCurrency(tax)}</span>\n                    </div>\n                    <div className=\"flex justify-between border-t pt-2\">\n                      <span className=\"text-base font-semibold\">Total TTC:</span>\n                      <span className=\"text-base font-semibold\">{formatCurrency(total)}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending}\n                  >\n                    Créer la Facture\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* View Invoice Dialog */}\n        {viewingInvoice && (\n          <Dialog open={!!viewingInvoice} onOpenChange={() => setViewingInvoice(null)}>\n            <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto print:max-w-none print:max-h-none print:overflow-visible\">\n              <DialogHeader className=\"print:hidden\">\n                <DialogTitle>Facture {viewingInvoice.number}</DialogTitle>\n              </DialogHeader>\n              <InvoicePDF invoice={viewingInvoice} user={user} />\n            </DialogContent>\n          </Dialog>\n        )}\n      </main>\n    </div>\n  );\n}\n","size_bytes":47072},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BarChart3, Users, Package, FileText, TrendingUp } from \"lucide-react\";\nimport { useTranslation } from \"@/lib/i18n\";\n\nexport default function Landing() {\n  const { t } = useTranslation();\n  \n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center mb-8\">\n            <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center\">\n              <BarChart3 className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-5xl font-bold text-gray-900 mb-6\">\n            {t('appTitle')}\n          </h1>\n          <p className=\"text-xl text-gray-600 mb-8 max-w-2xl mx-auto\">\n            {t('appDescription')}\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              className=\"text-lg px-8 py-4\"\n              onClick={() => window.location.href = '/auth'}\n            >\n              {t('loginButton')}\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\"\n              className=\"text-lg px-8 py-4\"\n              onClick={() => window.location.href = '/auth'}\n            >\n              {t('createAccountButton')}\n            </Button>\n          </div>\n          <p className=\"text-sm text-gray-500 mt-4\">\n            {t('newUserText')}\n          </p>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">{t('clientManagement')}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {t('clientManagementDesc')}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Package className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">{t('productCatalog')}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {t('productCatalogDesc')}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">{t('invoicing')}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {t('invoicingDesc')}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-6\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <TrendingUp className=\"w-6 h-6 text-orange-600\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">{t('reporting')}</h3>\n              <p className=\"text-sm text-gray-600\">\n                {t('reportingDesc')}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Benefits Section */}\n        <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n          <h2 className=\"text-3xl font-bold text-center text-gray-900 mb-8\">\n            {t('whyChoose')}\n          </h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl mb-4\">🚀</div>\n              <h3 className=\"text-xl font-semibold mb-2\">{t('modernInterface')}</h3>\n              <p className=\"text-gray-600\">\n                {t('modernInterfaceDesc')}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl mb-4\">🔒</div>\n              <h3 className=\"text-xl font-semibold mb-2\">{t('secure')}</h3>\n              <p className=\"text-gray-600\">\n                {t('secureDesc')}\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-4xl mb-4\">📊</div>\n              <h3 className=\"text-xl font-semibold mb-2\">{t('dashboardTitle')}</h3>\n              <p className=\"text-gray-600\">\n                {t('dashboardDesc')}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center mt-16\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            {t('readyToOptimize')}\n          </h2>\n          <p className=\"text-gray-600 mb-8\">\n            {t('joinCompanies')}\n          </p>\n          <Button \n            size=\"lg\"\n            onClick={() => window.location.href = '/api/login'}\n          >\n            {t('startNow')}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5615},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Package, \n  Edit, \n  Trash2, \n  Plus,\n  Search,\n  AlertTriangle\n} from \"lucide-react\";\nimport { insertProductSchema, type Product, type InsertProduct, type Category } from \"@shared/schema\";\nimport { formatPrice } from \"@/lib/i18n\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nexport default function Products() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { settings } = useSettings();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    retry: false,\n    refetchInterval: 60000, // Rafraîchit toutes les 60 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 30000,\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n    refetchInterval: 120000, // Rafraîchit toutes les 2 minutes\n    staleTime: 60000,\n  });\n\n  const form = useForm<InsertProduct>({\n    resolver: zodResolver(insertProductSchema.omit({ userId: true })),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      priceHT: \"\",\n      stock: 0,\n      alertStock: 10,\n      categoryId: undefined,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      await apiRequest(\"POST\", \"/api/products\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Produit créé\",\n        description: \"Le produit a été créé avec succès.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer le produit.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      if (!editingProduct) throw new Error(\"No product to update\");\n      await apiRequest(\"PUT\", `/api/products/${editingProduct.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Produit modifié\",\n        description: \"Le produit a été modifié avec succès.\",\n      });\n      setIsDialogOpen(false);\n      setEditingProduct(null);\n      form.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le produit.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/products/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Produit supprimé\",\n        description: \"Le produit a été supprimé avec succès.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le produit.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleOpenDialog = (product?: Product) => {\n    if (product) {\n      setEditingProduct(product);\n      form.reset({\n        name: product.name,\n        description: product.description || \"\",\n        priceHT: product.priceHT,\n        stock: product.stock || 0,\n        alertStock: product.alertStock || 10,\n        categoryId: product.categoryId || undefined,\n      });\n    } else {\n      setEditingProduct(null);\n      form.reset({\n        name: \"\",\n        description: \"\",\n        priceHT: \"\",\n        stock: 0,\n        alertStock: 10,\n        categoryId: undefined,\n      });\n    }\n    setIsDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertProduct) => {\n    if (editingProduct) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const filteredProducts = products.filter((product: Product) =>\n    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    product.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getCategoryName = (categoryId: number | null) => {\n    if (!categoryId) return \"Sans catégorie\";\n    const category = categories.find((cat: Category) => cat.id === categoryId);\n    return category?.name || \"Catégorie inconnue\";\n  };\n\n  const formatProductPrice = (price: string) => {\n    const currency = settings?.currency || 'XOF';\n    return formatPrice(parseFloat(price), currency);\n  };\n\n  const getStockStatus = (stock: number | null, alertStock: number | null = 10) => {\n    const stockValue = stock || 0;\n    const alertValue = alertStock || 10;\n    if (stockValue === 0) {\n      return { label: \"Rupture\", variant: \"destructive\" as const, icon: AlertTriangle };\n    } else if (stockValue <= alertValue) {\n      return { label: \"Stock faible\", variant: \"secondary\" as const, icon: AlertTriangle };\n    }\n    return { label: \"En stock\", variant: \"secondary\" as const, icon: null };\n  };\n\n  if (isLoading || productsLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Produits\" \n          subtitle=\"Gérez votre catalogue de produits\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-32\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Produits\" \n        subtitle=\"Gérez votre catalogue de produits\"\n        action={{\n          label: \"Nouveau Produit\",\n          onClick: () => handleOpenDialog()\n        }}\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Rechercher un produit...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        {filteredProducts.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                {searchTerm ? \"Aucun produit trouvé\" : \"Aucun produit\"}\n              </h3>\n              <p className=\"text-gray-500 mb-4\">\n                {searchTerm \n                  ? \"Essayez de modifier votre recherche.\"\n                  : \"Commencez par ajouter votre premier produit.\"\n                }\n              </p>\n              {!searchTerm && (\n                <Button onClick={() => handleOpenDialog()}>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Nouveau Produit\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredProducts.map((product: Product) => {\n              const stockStatus = getStockStatus(product.stock, product.alertStock);\n              const StockIcon = stockStatus.icon;\n              \n              return (\n                <Card key={product.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                        <div className=\"flex items-center gap-2 mt-2\">\n                          <Badge variant=\"outline\">\n                            {getCategoryName(product.categoryId)}\n                          </Badge>\n                          <Badge variant={stockStatus.variant} className=\"flex items-center gap-1\">\n                            {StockIcon && <StockIcon className=\"w-3 h-3\" />}\n                            {stockStatus.label}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleOpenDialog(product)}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(product.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {product.description && (\n                      <p className=\"text-sm text-gray-600 line-clamp-2\">\n                        {product.description}\n                      </p>\n                    )}\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-lg font-semibold text-gray-900\">\n                          {formatProductPrice(product.priceHT)} HT\n                        </p>\n                        <div className=\"text-sm text-gray-500 space-y-1\">\n                          <p>Stock: {product.stock || 0} unités</p>\n                          <p>Seuil d'alerte: {product.alertStock || 10} unités</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"pt-2 text-xs text-gray-500\">\n                      Créé le {product.createdAt && new Date(product.createdAt).toLocaleDateString('fr-FR')}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Create/Edit Dialog */}\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingProduct ? \"Modifier le Produit\" : \"Nouveau Produit\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Nom du produit *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Attiéké complet\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Plat traditionnel ivoirien à base de manioc\"\n                          rows={3}\n                          {...field}\n                          value={field.value || \"\"}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"priceHT\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Prix HT ({settings?.currency === 'GHS' ? 'GH₵' : 'XOF'}) *</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            min=\"0.01\"\n                            placeholder=\"0.00\" \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Catégorie</FormLabel>\n                        <Select \n                          onValueChange={(value) => field.onChange(value === \"none\" ? undefined : value ? parseInt(value) : undefined)}\n                          value={field.value?.toString() || \"none\"}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Sélectionner une catégorie\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"none\">Aucune catégorie</SelectItem>\n                            {categories.map((category: Category) => (\n                              <SelectItem key={category.id} value={category.id.toString()}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"stock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stock actuel</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"0\"\n                            placeholder=\"0\" \n                            {...field}\n                            value={field.value || 0}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"alertStock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Seuil d'alerte stock</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\"\n                            placeholder=\"10\" \n                            {...field}\n                            value={field.value || 10}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 10)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n\n\n\n\n                <div className=\"flex justify-end space-x-4 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Annuler\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingProduct ? \"Modifier\" : \"Créer\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":19302},"client/src/pages/sales.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  TrendingUp, \n  Calendar,\n  Package,\n\n  Users,\n  BarChart3\n} from \"lucide-react\";\nimport { type Sale } from \"@shared/schema\";\n\nexport default function Sales() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: sales = [], isLoading: salesLoading } = useQuery<Sale[]>({\n    queryKey: [\"/api/sales\"],\n    retry: false,\n    refetchInterval: 45000, // Rafraîchit toutes les 45 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 0,\n  });\n\n  const { data: stats } = useQuery<{\n    revenue: number;\n    invoiceCount: number;\n    clientCount: number;\n    productCount: number;\n    recentInvoices: any[];\n    topProducts: any[];\n    lowStockProducts: any[];\n  }>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n    refetchInterval: 30000, // Rafraîchit toutes les 30 secondes\n    refetchIntervalInBackground: true,\n    staleTime: 0,\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    // Utilise XOF par défaut pour les ventes\n    return new Intl.NumberFormat('fr-FR', {\n      style: 'decimal',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(numAmount) + ' F CFA';\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('fr-FR');\n  };\n\n  // Calculate sales statistics\n  const totalSales = sales.reduce((sum: number, sale: Sale) => sum + parseFloat(sale.total), 0);\n  const averageSale = sales.length > 0 ? totalSales / sales.length : 0;\n  const totalQuantity = sales.reduce((sum: number, sale: Sale) => sum + sale.quantity, 0);\n\n  // Group sales by month for chart data\n  const salesByMonth = sales.reduce((acc: any, sale: Sale) => {\n    const month = new Date(sale.createdAt!).toLocaleString('fr-FR', { month: 'long', year: 'numeric' });\n    if (!acc[month]) {\n      acc[month] = { total: 0, count: 0 };\n    }\n    acc[month].total += parseFloat(sale.total);\n    acc[month].count += 1;\n    return acc;\n  }, {});\n\n  if (isLoading || salesLoading) {\n    return (\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          title=\"Historique des Ventes\" \n          subtitle=\"Analysez vos performances de vente\"\n        />\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-sm border border-gray-200 h-32\" />\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      <Header \n        title=\"Historique des Ventes\" \n        subtitle=\"Analysez vos performances de vente\"\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Sales Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Ventes Totales</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(totalSales)}</p>\n                  <p className=\"text-sm text-green-600 mt-1\">\n                    {sales.length} transactions\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"text-green-500 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Vente Moyenne</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(averageSale)}</p>\n                  <p className=\"text-sm text-blue-600 mt-1\">\n                    par transaction\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                  <BarChart3 className=\"text-blue-500 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Articles Vendus</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{totalQuantity}</p>\n                  <p className=\"text-sm text-purple-600 mt-1\">\n                    unités au total\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                  <Package className=\"text-purple-500 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Clients Actifs</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{stats?.clientCount || 0}</p>\n                  <p className=\"text-sm text-orange-600 mt-1\">\n                    clients totaux\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                  <Users className=\"text-orange-500 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Sales by Month */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Ventes par Mois</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {Object.keys(salesByMonth).length === 0 ? (\n                <div className=\"py-12 text-center\">\n                  <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Aucune donnée de vente disponible</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {Object.entries(salesByMonth).map(([month, data]: [string, any]) => (\n                    <div key={month} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{month}</p>\n                        <p className=\"text-sm text-gray-500\">{data.count} ventes</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-gray-900\">{formatCurrency(data.total)}</p>\n                        <p className=\"text-sm text-gray-500\">\n                          {formatCurrency(data.total / data.count)} moy.\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Top Products */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Produits les Plus Vendus</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!stats?.topProducts || stats.topProducts.length === 0 ? (\n                <div className=\"py-12 text-center\">\n                  <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Aucun produit vendu</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {stats.topProducts.map((product: any, index: number) => (\n                    <div key={product.id} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <span className=\"text-sm font-semibold text-primary\">\n                            #{index + 1}\n                          </span>\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{product.name}</p>\n                          <p className=\"text-sm text-gray-500\">{formatCurrency(product.price)}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge variant=\"secondary\">\n                          {product.salesCount} vendus\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Sales */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>Ventes Récentes</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {sales.length === 0 ? (\n              <div className=\"py-12 text-center\">\n                <TrendingUp className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Aucune vente</h3>\n                <p className=\"text-gray-500\">Les ventes apparaîtront ici une fois que vous aurez créé des factures payées.</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Date\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Produit\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Quantité\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Prix Unitaire\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                        Total\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {sales.slice(0, 10).map((sale: Sale) => (\n                      <tr key={sale.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {sale.createdAt && formatDate(sale.createdAt)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                          Produit #{sale.productId}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {sale.quantity}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatCurrency(sale.unitPrice)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900\">\n                          {formatCurrency(sale.total)}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12949},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Settings as SettingsIcon, \n  Globe, \n  DollarSign,\n  Save,\n  Mail,\n  HelpCircle,\n  ExternalLink,\n  Book,\n\n  User\n} from \"lucide-react\";\nimport { currencies, languages, useTranslation } from \"@/lib/i18n\";\n\nimport ProfileEditor from \"@/components/profile-editor\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { settings, updateSettings, isUpdating } = useSettings();\n  const [localCurrency, setLocalCurrency] = useState(\"\");\n  const [localLanguage, setLocalLanguage] = useState(\"\");\n  \n  const { t } = useTranslation(settings?.language);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Initialize local state with settings\n  useEffect(() => {\n    if (settings) {\n      setLocalCurrency(settings.currency);\n      setLocalLanguage(settings.language);\n    }\n  }, [settings]);\n\n  const handleSave = async () => {\n    try {\n      updateSettings({\n        currency: localCurrency,\n        language: localLanguage as \"fr\" | \"en\",\n      });\n      \n      toast({\n        title: \"Paramètres sauvegardés\",\n        description: \"Vos préférences ont été mises à jour avec succès.\",\n      });\n      \n      // Reload page to apply language changes\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } catch (error: any) {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de sauvegarder les paramètres.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const hasChanges = \n    localCurrency !== settings?.currency || \n    localLanguage !== settings?.language;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">Chargement...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col bg-gray-50\">\n      <Header \n        title={t('settings')}\n        subtitle=\"Configurez vos préférences d'application\"\n      />\n\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"max-w-2xl mx-auto space-y-6\">\n          {/* Language Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"w-5 h-5\" />\n                {t('language')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"language\">Langue de l'interface</Label>\n                <Select \n                  value={localLanguage} \n                  onValueChange={setLocalLanguage}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner une langue\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {languages.map((lang) => (\n                      <SelectItem key={lang.value} value={lang.value}>\n                        {lang.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-500\">\n                  La langue sélectionnée sera appliquée à toute l'interface.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Personal Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                {t('personalInfo')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <ProfileEditor />\n              <p className=\"text-sm text-gray-500\">\n                {settings?.language === 'en' \n                  ? 'Update your personal and business information. This information will appear on your invoices.'\n                  : 'Mettez à jour vos informations personnelles et d\\'entreprise. Ces informations apparaîtront sur vos factures.'\n                }\n              </p>\n            </CardContent>\n          </Card>\n\n\n\n          {/* Currency Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                {t('currency')}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"currency\">Devise par défaut</Label>\n                <Select \n                  value={localCurrency} \n                  onValueChange={setLocalCurrency}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner une devise\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {currencies.map((currency) => (\n                      <SelectItem key={currency.value} value={currency.value}>\n                        {currency.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-500\">\n                  Cette devise sera utilisée pour afficher tous les prix.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Developer Contact */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Mail className=\"w-5 h-5\" />\n                {settings?.language === 'en' ? 'Contact Developer' : 'Contacter le Développeur'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                <div>\n                  <h3 className=\"font-medium text-blue-900\">\n                    {settings?.language === 'en' ? 'Need help or have suggestions?' : 'Besoin d\\'aide ou des suggestions ?'}\n                  </h3>\n                  <p className=\"text-sm text-blue-700 mt-1\">\n                    {settings?.language === 'en' \n                      ? 'Contact the developer for support, feature requests, or bug reports.'\n                      : 'Contactez le développeur pour du support, demandes de fonctionnalités ou signaler des bugs.'\n                    }\n                  </p>\n                </div>\n                <Button \n                  onClick={() => window.open('mailto:youssouphafils@gmail.com?subject=YGestion - Support', '_blank')}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2 border-blue-300 text-blue-700 hover:bg-blue-100\"\n                >\n                  <Mail className=\"w-4 h-4\" />\n                  {settings?.language === 'en' ? 'Send Email' : 'Envoyer Email'}\n                  <ExternalLink className=\"w-3 h-3\" />\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                youssouphafils@gmail.com\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* User Guide */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Book className=\"w-5 h-5\" />\n                {settings?.language === 'en' ? 'User Guide' : 'Guide d\\'Utilisation'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-medium flex items-center gap-2 mb-2\">\n                    <HelpCircle className=\"w-4 h-4 text-blue-500\" />\n                    {settings?.language === 'en' ? 'Getting Started' : 'Premiers Pas'}\n                  </h3>\n                  <ul className=\"text-sm text-gray-600 space-y-1 list-disc list-inside\">\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Start by adding your first clients in the Clients section'\n                        : 'Commencez par ajouter vos premiers clients dans la section Clients'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Create product categories and add your products with prices'\n                        : 'Créez des catégories de produits et ajoutez vos produits avec leurs prix'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Generate professional invoices and track your sales'\n                        : 'Générez des factures professionnelles et suivez vos ventes'\n                      }\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-medium flex items-center gap-2 mb-2\">\n                    <HelpCircle className=\"w-4 h-4 text-green-500\" />\n                    {settings?.language === 'en' ? 'Key Features' : 'Fonctionnalités Principales'}\n                  </h3>\n                  <ul className=\"text-sm text-gray-600 space-y-1 list-disc list-inside\">\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Real-time dashboard with business analytics'\n                        : 'Tableau de bord en temps réel avec analyses commerciales'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'PDF invoice generation and printing'\n                        : 'Génération et impression de factures PDF'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Automatic stock management and alerts'\n                        : 'Gestion automatique des stocks et alertes'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Multi-currency support (XOF, GHS)'\n                        : 'Support multi-devises (XOF, GHS)'\n                      }\n                    </li>\n                  </ul>\n                </div>\n\n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"font-medium flex items-center gap-2 mb-2\">\n                    <HelpCircle className=\"w-4 h-4 text-orange-500\" />\n                    {settings?.language === 'en' ? 'Tips & Tricks' : 'Conseils & Astuces'}\n                  </h3>\n                  <ul className=\"text-sm text-gray-600 space-y-1 list-disc list-inside\">\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Set custom stock alert levels for each product'\n                        : 'Définissez des seuils d\\'alerte stock personnalisés pour chaque produit'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Use the export feature to backup your business data'\n                        : 'Utilisez la fonction export pour sauvegarder vos données commerciales'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Print directly from invoice preview or download as PDF'\n                        : 'Imprimez directement depuis l\\'aperçu facture ou téléchargez en PDF'\n                      }\n                    </li>\n                    <li>\n                      {settings?.language === 'en' \n                        ? 'Monitor your top-selling products in the dashboard'\n                        : 'Surveillez vos produits les plus vendus dans le tableau de bord'\n                      }\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Reset Language Selector */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"w-5 h-5\" />\n                {settings?.language === 'en' ? 'Language Setup' : 'Configuration de Langue'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg border\">\n                <div>\n                  <h3 className=\"font-medium text-gray-900\">\n                    {settings?.language === 'en' ? 'Reset Language Selector' : 'Réinitialiser le Sélecteur de Langue'}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {settings?.language === 'en' \n                      ? 'Show the language selection screen again on next app startup.'\n                      : 'Afficher à nouveau l\\'écran de sélection de langue au prochain démarrage.'\n                    }\n                  </p>\n                </div>\n                <Button \n                  onClick={() => {\n                    localStorage.removeItem('initialLanguageSelected');\n                    localStorage.removeItem('preferredLanguage');\n                    localStorage.removeItem('languageSynced');\n                    window.location.reload();\n                  }}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                >\n                  <Globe className=\"w-4 h-4\" />\n                  {settings?.language === 'en' ? 'Reset' : 'Réinitialiser'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button \n              onClick={handleSave}\n              disabled={!hasChanges || isUpdating}\n              className=\"flex items-center gap-2\"\n            >\n              <Save className=\"w-4 h-4\" />\n              {isUpdating ? \"Sauvegarde...\" : \"Sauvegarder\"}\n            </Button>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":15624},"client/src/pages/user-registration.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  Mail, \n  Phone, \n  Building, \n  User,\n  Camera,\n  CheckCircle,\n  ArrowRight\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\n\n// Schema pour l'inscription utilisateur étendue\nconst userRegistrationSchema = z.object({\n  firstName: z.string().min(2, \"Le prénom doit contenir au moins 2 caractères\"),\n  lastName: z.string().min(2, \"Le nom doit contenir au moins 2 caractères\"),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  position: z.string().optional(),\n  address: z.string().optional(),\n  businessType: z.string().optional(),\n});\n\ntype UserRegistrationData = z.infer<typeof userRegistrationSchema>;\n\nexport default function UserRegistration() {\n  const { toast } = useToast();\n  const { user, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState(1);\n\n  const form = useForm<UserRegistrationData>({\n    resolver: zodResolver(userRegistrationSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      company: \"\",\n      position: \"\",\n      address: \"\",\n      businessType: \"\",\n    },\n  });\n\n  // Initialiser le formulaire avec les données existantes de l'utilisateur\n  useEffect(() => {\n    if (user) {\n      form.reset({\n        firstName: user.firstName || \"\",\n        lastName: user.lastName || \"\",\n        phone: \"\",\n        company: \"\",\n        position: \"\",\n        address: \"\",\n        businessType: \"\",\n      });\n    }\n  }, [user, form]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: UserRegistrationData) => {\n      const response = await fetch(\"/api/auth/complete-profile\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur de mise à jour du profil\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profil complété !\",\n        description: \"Votre profil a été mis à jour avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      // Rediriger vers le tableau de bord\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 1500);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Une erreur s'est produite lors de la mise à jour de votre profil.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Erreur de mise à jour du profil:\", error);\n    },\n  });\n\n  const onSubmit = (data: UserRegistrationData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const nextStep = () => {\n    if (step < 3) setStep(step + 1);\n  };\n\n  const prevStep = () => {\n    if (step > 1) setStep(step - 1);\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"animate-pulse\">\n          <div className=\"w-96 h-96 bg-white rounded-xl shadow-sm\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle>Connexion requise</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-gray-600 text-center mb-4\">\n              Vous devez être connecté pour compléter votre profil.\n            </p>\n            <Button \n              onClick={() => window.location.href = \"/api/login\"}\n              className=\"w-full\"\n            >\n              Se connecter\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12 px-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Users className=\"w-8 h-8 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Bienvenue dans YGestion !\n          </h1>\n          <p className=\"text-gray-600\">\n            Complétez votre profil pour profiter pleinement de toutes les fonctionnalités\n          </p>\n        </div>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"flex items-center\">\n                <div className={`\n                  w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium\n                  ${step >= i \n                    ? 'bg-primary text-white' \n                    : 'bg-gray-200 text-gray-500'\n                  }\n                `}>\n                  {step > i ? <CheckCircle className=\"w-5 h-5\" /> : i}\n                </div>\n                {i < 3 && (\n                  <div className={`\n                    w-full h-2 mx-4 rounded-full\n                    ${step > i ? 'bg-primary' : 'bg-gray-200'}\n                  `} />\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"flex justify-between text-sm text-gray-600\">\n            <span>Informations personnelles</span>\n            <span>Entreprise</span>\n            <span>Confirmation</span>\n          </div>\n        </div>\n\n        {/* Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {step === 1 && \"Informations personnelles\"}\n              {step === 2 && \"Informations professionnelles\"}\n              {step === 3 && \"Confirmation\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Étape 1: Informations personnelles */}\n                {step === 1 && (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Prénom *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Kouamé\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nom *</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Yao\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"phone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Téléphone</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"07 12 34 56 78\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Adresse</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Cocody Riviera 3, Abidjan\"\n                              rows={3}\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-500 mb-4\">\n                        Email: <span className=\"font-medium\">{user.email}</span>\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Étape 2: Informations professionnelles */}\n                {step === 2 && (\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"company\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nom de l'entreprise</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"SARL AKWABA\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"position\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Poste/Fonction</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Gérant\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"businessType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Secteur d'activité</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Commerce général, Restauration, etc.\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n\n                {/* Étape 3: Confirmation */}\n                {step === 3 && (\n                  <div className=\"space-y-6\">\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n                      <div className=\"flex items-center mb-4\">\n                        <CheckCircle className=\"w-6 h-6 text-green-500 mr-2\" />\n                        <h3 className=\"text-lg font-medium text-green-900\">\n                          Profil prêt à être complété !\n                        </h3>\n                      </div>\n                      \n                      <div className=\"space-y-3 text-sm\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Nom complet:</span>\n                            <p className=\"text-gray-900\">\n                              {form.watch(\"firstName\")} {form.watch(\"lastName\")}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Email:</span>\n                            <p className=\"text-gray-900\">{user.email}</p>\n                          </div>\n                        </div>\n                        \n                        {form.watch(\"company\") && (\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Entreprise:</span>\n                            <p className=\"text-gray-900\">{form.watch(\"company\")}</p>\n                          </div>\n                        )}\n                        \n                        {form.watch(\"phone\") && (\n                          <div>\n                            <span className=\"font-medium text-gray-700\">Téléphone:</span>\n                            <p className=\"text-gray-900\">{form.watch(\"phone\")}</p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <h4 className=\"font-medium text-blue-900 mb-2\">\n                        Fonctionnalités disponibles après completion :\n                      </h4>\n                      <ul className=\"text-sm text-blue-800 space-y-1\">\n                        <li>• Gestion complète des clients et produits</li>\n                        <li>• Création et envoi de factures professionnelles</li>\n                        <li>• Tableau de bord avec analytics en temps réel</li>\n                        <li>• Export et sauvegarde de vos données</li>\n                      </ul>\n                    </div>\n                  </div>\n                )}\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between pt-6\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={prevStep}\n                    disabled={step === 1}\n                  >\n                    Précédent\n                  </Button>\n\n                  {step < 3 ? (\n                    <Button\n                      type=\"button\"\n                      onClick={nextStep}\n                      disabled={\n                        (step === 1 && (!form.watch(\"firstName\") || !form.watch(\"lastName\")))\n                      }\n                    >\n                      Suivant\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  ) : (\n                    <Button\n                      type=\"submit\"\n                      disabled={updateProfileMutation.isPending}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      {updateProfileMutation.isPending ? \"Enregistrement...\" : \"Terminer\"}\n                      <CheckCircle className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  )}\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":15718},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className={cn(\"py-6 text-center text-sm\", className)}\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}","size_bytes":4887},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }","size_bytes":1229},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin-licenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, Shield, Key, AlertCircle, Check, X, Ban } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport type { License } from \"@shared/schema\";\n\nexport default function AdminLicensesPage() {\n  const [adminToken, setAdminToken] = useState(\"\");\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [newLicense, setNewLicense] = useState({\n    key: \"\",\n    clientName: \"\",\n    createdBy: \"Youssouphafils\",\n  });\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  // Query to fetch all licenses\n  const {\n    data: licenses,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"admin-licenses\"],\n    queryFn: async (): Promise<License[]> => {\n      const response = await fetch(\"/api/admin/licenses\", {\n        headers: {\n          \"x-admin-token\": adminToken,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Accès refusé ou erreur serveur\");\n      }\n      \n      return response.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  // Mutation to create a new license\n  const createLicenseMutation = useMutation({\n    mutationFn: async (licenseData: typeof newLicense) => {\n      const response = await fetch(\"/api/admin/licenses\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-admin-token\": adminToken,\n        },\n        body: JSON.stringify(licenseData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de la création\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin-licenses\"] });\n      setNewLicense({ key: \"\", clientName: \"\", createdBy: \"Youssouphafils\" });\n      setCreateDialogOpen(false);\n    },\n  });\n\n  // Mutation to revoke a license\n  const revokeLicenseMutation = useMutation({\n    mutationFn: async (key: string) => {\n      const response = await fetch(`/api/admin/licenses/${key}/revoke`, {\n        method: \"PATCH\",\n        headers: {\n          \"x-admin-token\": adminToken,\n        },\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur lors de la révocation\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin-licenses\"] });\n    },\n  });\n\n  const handleAuthenticate = () => {\n    if (adminToken.trim()) {\n      setIsAuthenticated(true);\n    }\n  };\n\n  const handleCreateLicense = () => {\n    if (!newLicense.key.trim()) return;\n    createLicenseMutation.mutate(newLicense);\n  };\n\n  const generateLicenseKey = () => {\n    const year = new Date().getFullYear();\n    const random = Math.random().toString(36).substr(2, 3).toUpperCase();\n    const sequence = String(Math.floor(Math.random() * 999) + 1).padStart(3, '0');\n    return `WENIBAC-${year}-${sequence}-${random}`;\n  };\n\n  const getStatusBadge = (license: License) => {\n    if (license.revokedAt) {\n      return <Badge variant=\"destructive\" className=\"flex items-center gap-1\"><Ban className=\"w-3 h-3\" />Révoquée</Badge>;\n    }\n    if (license.activated) {\n      return <Badge variant=\"default\" className=\"flex items-center gap-1 bg-green-500\"><Check className=\"w-3 h-3\" />Activée</Badge>;\n    }\n    return <Badge variant=\"secondary\" className=\"flex items-center gap-1\"><Key className=\"w-3 h-3\" />En attente</Badge>;\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md shadow-xl\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"mx-auto w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center mb-4\">\n              <Shield className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Administration YGestion</CardTitle>\n            <CardDescription>\n              Accès réservé à l'administrateur\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"adminToken\">Token d'administration</Label>\n              <Input\n                id=\"adminToken\"\n                type=\"password\"\n                placeholder=\"Entrez votre token admin\"\n                value={adminToken}\n                onChange={(e) => setAdminToken(e.target.value)}\n                onKeyDown={(e) => e.key === \"Enter\" && handleAuthenticate()}\n                data-testid=\"input-admin-token\"\n              />\n            </div>\n\n            <Button \n              onClick={handleAuthenticate}\n              className=\"w-full\"\n              disabled={!adminToken.trim()}\n              data-testid=\"button-authenticate\"\n            >\n              Se connecter\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-2xl\">Administration des Licences</CardTitle>\n                <CardDescription>\n                  Gestion des clés d'activation YGestion\n                </CardDescription>\n              </div>\n              <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-new-license\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nouvelle licence\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Créer une nouvelle licence</DialogTitle>\n                    <DialogDescription>\n                      Générez une nouvelle clé d'activation pour un client\n                    </DialogDescription>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-4 py-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"licenseKey\">Clé d'activation</Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"licenseKey\"\n                          value={newLicense.key}\n                          onChange={(e) => setNewLicense(prev => ({ ...prev, key: e.target.value }))}\n                          className=\"font-mono\"\n                          placeholder=\"WENIBAC-2025-001-ABC\"\n                          data-testid=\"input-new-license-key\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setNewLicense(prev => ({ ...prev, key: generateLicenseKey() }))}\n                          data-testid=\"button-generate-key\"\n                        >\n                          Générer\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"clientName\">Nom du client</Label>\n                      <Input\n                        id=\"clientName\"\n                        value={newLicense.clientName}\n                        onChange={(e) => setNewLicense(prev => ({ ...prev, clientName: e.target.value }))}\n                        placeholder=\"Nom du client\"\n                        data-testid=\"input-client-name-new\"\n                      />\n                    </div>\n                  </div>\n\n                  {createLicenseMutation.isError && (\n                    <Alert variant=\"destructive\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <AlertDescription>\n                        {createLicenseMutation.error?.message || \"Erreur lors de la création\"}\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  <DialogFooter>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setCreateDialogOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      Annuler\n                    </Button>\n                    <Button \n                      onClick={handleCreateLicense}\n                      disabled={!newLicense.key.trim() || createLicenseMutation.isPending}\n                      data-testid=\"button-create-license\"\n                    >\n                      {createLicenseMutation.isPending ? \"Création...\" : \"Créer\"}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Licenses Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"text-center\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                  <p className=\"text-muted-foreground\">Chargement des licences...</p>\n                </div>\n              </div>\n            ) : error ? (\n              <div className=\"p-6\">\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Erreur lors du chargement des licences. Vérifiez votre token d'administration.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Clé</TableHead>\n                    <TableHead>Client</TableHead>\n                    <TableHead>Statut</TableHead>\n                    <TableHead>Activée le</TableHead>\n                    <TableHead>Créée le</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {licenses?.map((license) => (\n                    <TableRow key={license.id}>\n                      <TableCell>\n                        <code className=\"bg-muted px-2 py-1 rounded font-mono text-sm\">\n                          {license.key}\n                        </code>\n                      </TableCell>\n                      <TableCell>{license.clientName || \"Non spécifié\"}</TableCell>\n                      <TableCell>{getStatusBadge(license)}</TableCell>\n                      <TableCell>\n                        {license.activatedAt ? (\n                          format(new Date(license.activatedAt), \"dd/MM/yyyy à HH:mm\", { locale: fr })\n                        ) : (\n                          \"—\"\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {license.createdAt ? (\n                          format(new Date(license.createdAt), \"dd/MM/yyyy à HH:mm\", { locale: fr })\n                        ) : (\n                          \"—\"\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {license.activated && !license.revokedAt && (\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => revokeLicenseMutation.mutate(license.key)}\n                            disabled={revokeLicenseMutation.isPending}\n                            data-testid={`button-revoke-${license.key}`}\n                          >\n                            <X className=\"w-4 h-4 mr-1\" />\n                            Révoquer\n                          </Button>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {licenses?.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                        Aucune licence créée pour le moment\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Stats */}\n        {licenses && licenses.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold\">{licenses.length}</div>\n                  <p className=\"text-sm text-muted-foreground\">Total licences</p>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {licenses.filter(l => l.activated && !l.revokedAt).length}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Actives</p>\n                </div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {licenses.filter(l => l.revokedAt).length}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Révoquées</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":14959},"client/src/pages/license-activation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Check, Key, AlertCircle } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\n\ninterface ActivationResponse {\n  message: string;\n  license: {\n    key: string;\n    clientName: string;\n    activatedAt: string;\n  };\n}\n\nexport default function LicenseActivationPage() {\n  const [formData, setFormData] = useState({\n    key: \"\",\n    clientName: \"\",\n    deviceId: \"\",\n  });\n\n  const activationMutation = useMutation({\n    mutationFn: async (data: typeof formData): Promise<ActivationResponse> => {\n      const response = await fetch(\"/api/activate\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Erreur d'activation\");\n      }\n      \n      return response.json();\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.key.trim()) return;\n    \n    activationMutation.mutate({\n      ...formData,\n      deviceId: formData.deviceId || `device-${Date.now()}`, // Generate device ID if not provided\n    });\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center mb-4\">\n              <Key className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">YGestion</CardTitle>\n            <CardDescription>\n              Activation de licence\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            {activationMutation.isSuccess ? (\n              <div className=\"text-center space-y-4\">\n                <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                  <Check className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg text-green-800 dark:text-green-200\">\n                    Licence activée avec succès !\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Votre licence a été activée pour {activationMutation.data?.license.clientName || \"votre appareil\"}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Clé: {activationMutation.data?.license.key}\n                  </p>\n                </div>\n                <Button \n                  onClick={() => window.location.href = \"/\"} \n                  className=\"w-full\"\n                  data-testid=\"button-continue\"\n                >\n                  Accéder à l'application\n                </Button>\n              </div>\n            ) : (\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"key\">Clé d'activation *</Label>\n                  <Input\n                    id=\"key\"\n                    name=\"key\"\n                    type=\"text\"\n                    placeholder=\"WENIBAC-2025-001\"\n                    value={formData.key}\n                    onChange={handleChange}\n                    required\n                    className=\"font-mono text-center\"\n                    data-testid=\"input-license-key\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"clientName\">Nom du client</Label>\n                  <Input\n                    id=\"clientName\"\n                    name=\"clientName\"\n                    type=\"text\"\n                    placeholder=\"H Hasan\"\n                    value={formData.clientName}\n                    onChange={handleChange}\n                    data-testid=\"input-client-name\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"deviceId\">ID de l'appareil (optionnel)</Label>\n                  <Input\n                    id=\"deviceId\"\n                    name=\"deviceId\"\n                    type=\"text\"\n                    placeholder=\"ABC123XYZ\"\n                    value={formData.deviceId}\n                    onChange={handleChange}\n                    className=\"font-mono\"\n                    data-testid=\"input-device-id\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Laissez vide pour générer automatiquement\n                  </p>\n                </div>\n\n                {activationMutation.isError && (\n                  <Alert variant=\"destructive\" data-testid=\"alert-error\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                      {activationMutation.error?.message || \"Erreur lors de l'activation\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={!formData.key.trim() || activationMutation.isPending}\n                  data-testid=\"button-activate\"\n                >\n                  {activationMutation.isPending ? \"Activation en cours...\" : \"Activer la licence\"}\n                </Button>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n\n        <p className=\"text-center text-sm text-muted-foreground mt-6\">\n          Besoin d'une clé d'activation ? Contactez votre administrateur.\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":6447}}}